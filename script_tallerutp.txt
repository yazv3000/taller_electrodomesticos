-- cambios en especialidad
/*********************************************************
   SCRIPT : CREACIÓN DE LA BD: taller_utp (POSTGRESQL)
*********************************************************/
--========================================================
-- SERVICIOS
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.servicio
(
    id_servicio integer NOT NULL,
    nombre_serv character varying(50) NOT NULL,
	nombre_pl character varying(50) NOT NULL,
    descripcion text NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
	foto_serv character varying(200),
	PRIMARY KEY (id_servicio)
);
CREATE SEQUENCE IF NOT EXISTS public.servicio_seq increment 1 start 1 OWNED BY servicio.id_servicio;
ALTER TABLE ONLY public.servicio ALTER COLUMN id_servicio SET DEFAULT nextval('public.servicio_seq'::regclass);
----------------------------------------------------------
INSERT INTO public.servicio(id_servicio, nombre_serv, nombre_pl, descripcion, estado_activ, foto_serv)
	VALUES
	(1, 'Visita técnica', 'Visitas técnicas', 'Solicita la visita técnica de nuestros expertos para realizar el diagnóstico o reparación del artefacto en tu hogar.', false, NULL),
	(2, 'Diagnóstico técnico', 'Diagnósticos técnicos', 'Si tu artefacto presenta averías, solicita evaluación técnica del equipo.', false, 'img/servicios/diagnostico.png'),
	(3, 'Instalación', 'Instalaciones', 'Deja la instalación de tus artefactos en manos de los expertos.', true, 'img/servicios/instalacion.png'),
	(4, 'Reparación', 'Reparaciones', 'Soluciona las averías de tus artefactos con repuestos originales.', true, 'img/servicios/reparacion.png'),
	(5, 'Conversión', 'Conversiones', 'Realiza la conversión de tu cocina a gas natural.', true, 'img/servicios/conversiones.png'),
	(6, 'Mantenimiento', 'Mantenimientos', 'Prolonga la vida útil de tus artefactos con cuidados preventivos.', true, 'img/servicios/mantenimiento.png'),
	(7, 'Asesoría técnica', 'Asesorías técnicas', 'Recibe asesoría sobre la configuración y uso de tus artefactos.', true, 'img/servicios/asesoria.png'),
	(8, 'Venta de piezas', 'Ventas de piezas', 'Encuentra los accesorios originales que necesitas para tus artefactos.', false, NULL),
	(9, 'Estudio de factibilidad', 'Estudios de factibilidad', 'Verifica si el espacio donde se instalará el artefacto cuenta con las condiciones técnicas, eléctricas y de gasfitería necesarias, para el óptimo funcionamiento del producto.', true, 'img/servicios/factibilidad.png');
SELECT setval('public.servicio_seq', 10, false);
--========================================================
-- ACTIVIDADES O SUBSERVICIOS
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.actividades_servicio
(
	id_actividad integer NOT NULL,
	id_servicio integer NOT NULL,
    nombre_actividad character varying(200) NOT NULL,
	precio numeric NOT NULL,
	PRIMARY KEY (id_actividad),
	CONSTRAINT fk_serv1 FOREIGN KEY (id_servicio) REFERENCES public.servicio(id_servicio) ON UPDATE CASCADE ON DELETE RESTRICT
);
CREATE SEQUENCE IF NOT EXISTS public.actividad_seq increment 1 start 1 OWNED BY actividades_servicio.id_actividad;
ALTER TABLE ONLY public.actividades_servicio ALTER COLUMN id_actividad SET DEFAULT nextval('public.actividad_seq'::regclass);
----------------------------------------------------------
DO $$
declare
	rec record;
	nombre_actividad character varying;
	query text;
begin
	query := 'select * from servicio where id_servicio between 3 and 6';
   for rec in execute query loop
		for cnt in 1..6 loop
			INSERT INTO public.actividades_servicio(id_servicio, nombre_actividad, precio)
			VALUES (rec.id_servicio, concat(substring(rec.nombre_serv,0,4), '_00',cnt), floor(random() * 10 + 3)::numeric);
		 end loop;
	end loop;
END $$;
--========================================================
-- DOCUMENTO DE IDENTIDAD
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.tipo_documento
(
    id_tipo_doc integer NOT NULL,
    nom_tipo_doc character varying(30) NOT NULL,
    PRIMARY KEY (id_tipo_doc)
);
CREATE SEQUENCE IF NOT EXISTS public.tipo_doc_seq increment 1 start 1 OWNED BY tipo_documento.id_tipo_doc;
ALTER TABLE ONLY public.tipo_documento ALTER COLUMN id_tipo_doc SET DEFAULT nextval('public.tipo_doc_seq'::regclass);
----------------------------------------------------------
INSERT INTO public.tipo_documento(nom_tipo_doc)
	VALUES
	('DNI'),
	('Carnet de Extranjería'),
	('Otros');
--========================================================
-- DISTRITO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.distrito
(
	id_distrito integer NOT NULL,
    nombre_distrito character varying(40) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_distrito)
);
CREATE SEQUENCE IF NOT EXISTS public.distrito_seq increment 1 start 1 OWNED BY distrito.id_distrito;
ALTER TABLE ONLY public.distrito ALTER COLUMN id_distrito SET DEFAULT nextval('public.distrito_seq'::regclass);
---------------------------------------------------------
INSERT INTO public.distrito(id_distrito, nombre_distrito)
	VALUES
	(1, 'Alto Selva Alegre'),
	(2, 'Arequipa'),
	(3, 'Cayma'),
	(4, 'Cerro Colorado'),
	(5, 'Characato'),
	(6, 'Chiguata'),
	(7, 'Jacobo Hunter'),
	(8, 'Jose Luis Bustamante y Ribero'),
	(9, 'La Joya'),
	(10, 'Mariano Melgar'),
	(11, 'Miraflores'),
	(12, 'Mollebaya'),
	(13, 'Paucarpata'),
	(14, 'Sabandia'),
	(15, 'Sachaca'),
	(16, 'Socabaya'),
	(17, 'Tiabaya'),
	(18, 'Uchumayo'),
	(19, 'Yanahuana'),
	(20, 'Yarabamba'),
	(21, 'Yura');
SELECT setval('public.distrito_seq', 22, false);
--========================================================
-- ROLES
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.roles
(
    id_rol integer NOT NULL,
	nombre_rol character varying(30) NOT NULL,
	PRIMARY KEY (id_rol)
);
CREATE SEQUENCE IF NOT EXISTS public.roles_seq increment 1 start 1 OWNED BY roles.id_rol;
ALTER TABLE ONLY public.roles ALTER COLUMN id_rol SET DEFAULT nextval('public.roles_seq'::regclass);
----------------------------------------------------------
INSERT INTO public.roles(id_rol, nombre_rol)
	VALUES
	(1, 'Cliente'),
	(2, 'Encargado'),
	(3, 'Técnico');
SELECT setval('public.roles_seq', 4, false);
--========================================================
-- PERSONAS & USUARIOS
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.persona
(
    id_persona integer NOT NULL,
    nombre_1 character varying(30) NOT NULL,
	nombre_2 character varying(30),
    apellido_1 character varying(30) NOT NULL,
    apellido_2 character varying(30),
    id_tipo_doc integer NOT NULL,
    nro_doc character varying(15) NOT NULL,
	telefono character varying(9) NOT NULL,
	id_distrito integer NOT NULL,
    direccion text NOT NULL,
	anios_experiencia integer,
	fecha_ingreso date,
	fecha_baja date,
	foto character varying(200),
    estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_persona),
	CONSTRAINT fk_tdoc FOREIGN KEY (id_tipo_doc) REFERENCES public.tipo_documento(id_tipo_doc) ON UPDATE CASCADE ON DELETE RESTRICT,
	CONSTRAINT fk_distr FOREIGN KEY (id_distrito) REFERENCES public.distrito(id_distrito) ON UPDATE CASCADE ON DELETE RESTRICT
);
CREATE SEQUENCE IF NOT EXISTS public.persona_seq increment 1 start 1 OWNED BY persona.id_persona;
ALTER TABLE ONLY public.persona ALTER COLUMN id_persona SET DEFAULT nextval('public.persona_seq'::regclass);
---------------------------------------------------
CREATE TABLE IF NOT EXISTS public.usuario
(
    id_user char(10) NOT NULL,
	id_rol integer NOT NULL,
	id_persona integer NOT NULL,
    email character varying(254) NOT NULL,
    contra text NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_user),
	CONSTRAINT fk_rol FOREIGN KEY (id_rol) REFERENCES public.roles(id_rol) ON UPDATE CASCADE ON DELETE RESTRICT,
	CONSTRAINT fk_persona FOREIGN KEY (id_persona) REFERENCES public.persona(id_persona) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE SEQUENCE IF NOT EXISTS public.usuario_seq increment 1 start 1 OWNED BY usuario.id_user;
ALTER TABLE ONLY public.usuario ALTER COLUMN id_user SET DEFAULT nextval('public.usuario_seq'::regclass);
---------------------------------------------------
--ENCARGADO
INSERT INTO public.persona(id_persona, nombre_1, nombre_2, apellido_1, apellido_2, id_tipo_doc, nro_doc, telefono, id_distrito, direccion, fecha_ingreso, fecha_baja, foto)
	VALUES
	(1, 'Alexandre', 'Vidal', 'Rodriguez', 'Coronado', 1, '65486516', '950036349', 4, 'Calle San Sebastián, 79', '2012-10-01', '2020-12-31', 'img/personas/m1.jpg'),
	(2, 'John', NULL, 'Doe', NULL, 2, '007629205', '941069548', 3, 'Av. Parra, 65', '2021-01-01', NULL, 'img/personas/m2.jpg');

INSERT INTO public.usuario(id_user, id_rol, id_persona, email, contra, estado_activ)
	VALUES
	('ENC-000001', 2, 1, 'admin01.utp@gmail.com', 'encargado123', false),
	('ENC-000002', 2, 2, 'admin02.utp@gmail.com', 'encargado123', true);

--TÉCNICOS
INSERT INTO public.persona(id_persona, nombre_1, nombre_2, apellido_1, apellido_2, id_tipo_doc, nro_doc, telefono, id_distrito, direccion, anios_experiencia, fecha_ingreso, foto)
	VALUES
	(3, 'Guillermo', NULL, 'Smith', 'Coppola', 1, '61614803', '997555176', 4, 'Av. Los Ángeles, 542', 5, '2012-12-13', 'img/personas/m3.jpg'),
	(4, 'Eduardo', NULL, 'Vallejo', 'Pereira', 1, '28423490', '974673951', 4, 'Av. Las Vegas, 123', 2, '2013-12-16', 'img/personas/m4.jpg'),
	(5, 'Adriana', NULL, 'Jordan', 'Rodriguez', 1, '40476142', '963306299', 4,  'Av. Las Malvinas, 213', 1, '2014-8-12', 'img/personas/f1.jpg'),
	(6, 'Andrea', NULL, 'Valdivia', 'Segales', 1, '48804278', '985130731', 4, 'Calle Amauta, 138', 4, '2015-10-02', 'img/personas/f2.jpg'),
	(7, 'Mario', NULL, 'Diaz', 'Torres', 1, '39840290', '938781368', 5, 'Av. Los Acres, 64', 1, '2016-05-10', 'img/personas/m5.jpg'),
	(8, 'Melman', NULL, 'Schwimmer', NULL, 2, '001925687', '974594323', 4, 'Urb. Los cipreses, A9', 2, '2017-02-23', 'img/personas/m6.jpg'),
	(9, 'Jennifer', NULL, 'Anco', 'Mamani', 1, '65246344', '938995970', 5, 'Av. Independecia, 71', 4, '2018-11-09', 'img/personas/f3.jpg'),
	(10, 'Alex', NULL, 'Cruz', 'Leon', 1, '44402460', '968696753', 4, 'Urb. Los cipreses, B1', 3, '2019-05-10', 'img/personas/m7.jpg'),
	(11, 'Jose', NULL, 'Perez', 'Rodriguez', 1, '50502291', '963725720', 5, 'Av. Argentina, 256', 10, '2020-10-23', 'img/personas/m8.jpg'),
	(12, 'Juan', 'Jose', 'Molina', 'Quispe', 1, '62289072', '994832406', 4, 'Calle Tahuaycani, 312', 8, '2021-03-01', 'img/personas/m9.jpg');
	
INSERT INTO public.usuario(id_user, id_rol, id_persona, email, contra)
	VALUES
	('TEC-000001', 3, 3, 'smithgil@gmail.com', 'tecnico123'),
	('TEC-000002', 3, 4, 'perava@gmai.com', 'tecnico123'),
	('TEC-000003', 3, 5, 'adr.jordan@gmail.com', 'tecnico123'),
	('TEC-000004', 3, 6, 'andrea.valdivia@gmail.com', 'tecnico123'),
	('TEC-000005', 3, 7, 'mario.diaz@gmail.com', 'tecnico123'),
	('TEC-000006', 3, 8, 'melman.schwimmer@gmail.com', 'tecnico123'),
	('TEC-000007', 3, 9, 'jennifer.anco@gmail.com', 'tecnico123'),
	('TEC-000008', 3, 10, 'alex.cruz@gmail.com', 'tecnico123'),
	('TEC-000009', 3, 11, 'jose.perez@gmail.com', 'tecnico123'),
	('TEC-000010', 3, 12, 'juan.molina@gmail.com', 'tecnico123');

--CLIENTES
INSERT INTO public.persona(id_persona, nombre_1, nombre_2, apellido_1, apellido_2, id_tipo_doc, nro_doc, telefono, id_distrito, direccion, foto)
	VALUES
	(13, 'Luis', NULL, 'Gamarra', 'Alcantara', 1, '68968558', '942256809', 4, 'Av. Parra, 313', 'img/personas/m9.jpg'),
	(14, 'Paul', NULL, 'Gutierrez', 'Manrique', 1, '79734822', '962122495', 4,'Av. Perú, 232', 'img/personas/m8.jpg'),
	(15, 'Juan', 'Pablo', 'Martinez', 'Lopez', 1, '51476446','943182888', 4,'Av. Argentina, 221', 'img/personas/m7.jpg'),
	(16, 'Leticia', NULL, 'Perez', 'Carpdevila', 1, '41005783','973308244', 4, 'Urb. Casa Blanca, B8', 'img/personas/f5.jpg'),
	(17, 'Edmundo', NULL, 'Quintana', 'Morante', 1, '29648571', '935067763', 4, 'Av. Paisajista, 407', 'img/personas/m6.jpg'),
	(18, 'Nicolas', NULL, 'Morales', 'Guillen', 1, '25918192', '998050058', 4, 'Urb. Zafiro, B11', 'img/personas/m5.jpg'),
	(19, 'Adrian', NULL, 'Ruiz', 'Villanueva', 1, '48722307','991349745', 4, 'Av. Porongoche, 606', 'img/personas/m4.jpg'),
	(20, 'William', NULL, 'Hammond', NULL, 2, '10459734080','953574916', 4, 'Calle César Vallejo, 89', 'img/personas/m3.jpg'),
	(21, 'Tookha', NULL, 'Garcia', 'Ghoul', 1, '56703261','984503612', 4, 'Jr. 28 de julo, 503', 'img/personas/f4.jpg'),
	(22, 'Gloria', NULL, 'Smith', NULL, 2, '00129073500', '935122495', 4, 'Av. Manuela Casárez, A7', 'img/personas/f3.jpg'); 

INSERT INTO public.usuario(id_user, id_rol, id_persona, email, contra)
	 VALUES
	 ('CLI-000001', 1, 1, 'alexandre.rodriguez@gmail.com', 'cliente123'),
	 ('CLI-000002', 1, 13, 'alcangama@gmail.com', 'cliente123'),
	 ('CLI-000003', 1, 14, 'gutman@gmail.com', 'cliente123'),
	 ('CLI-000004', 1, 15, 'martilop@gmail.com', 'cliente123'),
	 ('CLI-000005', 1, 16, 'leticia.perez@gmail.com', 'cliente123'),
	 ('CLI-000006', 1, 17, 'ed.quintana@gmail.com', 'cliente123'),
	 ('CLI-000007', 1, 18, 'nicola.morales@gmail.com', 'cliente123'),
	 ('CLI-000008', 1, 19, 'adrian.ruiz@gmail.com', 'cliente123'),
	 ('CLI-000009', 1, 20, 'william.hammond@gmail.com', 'cliente123'),
	 ('CLI-000010', 1, 21, 'tookha.garcia@gmail.com', 'cliente123'),
	 ('CLI-000011', 1, 22, 'gloria.smith@gmail.com', 'cliente123');
SELECT setval('public.persona_seq', 23, false);
--========================================================
-- ESPECIALIDADES DE CADA TÉCNICO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.tecnico_especialidad
(
	id_tecnico integer NOT NULL,
	id_servicio integer NOT NULL,
	PRIMARY KEY (id_tecnico, id_servicio),
	CONSTRAINT fk_tec1 FOREIGN KEY (id_tecnico) REFERENCES public.persona(id_persona) ON UPDATE CASCADE ON DELETE RESTRICT,
	CONSTRAINT fk_serv2 FOREIGN KEY (id_servicio) REFERENCES public.servicio(id_servicio) ON UPDATE CASCADE ON DELETE RESTRICT
);
----------------------------------------------------------
INSERT INTO tecnico_especialidad (id_tecnico, id_servicio)
VALUES 
	(10, 3), (3, 4), (3, 5), (3, 6);
DO $$
BEGIN
   for tec in 4..12 loop
	 INSERT INTO tecnico_especialidad (id_tecnico, id_servicio) VALUES (tec, tec%3 + 3);
   end loop;
END $$;
--========================================================
-- HORARIOS DE ATENCIÓN POR TÉCNICO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.horario_atencion
(
    id_horario integer NOT NULL,
    id_tecnico integer NOT NULL,
    fecha_atencion date NOT NULL,
    hora_inicio time NOT NULL,
	estado character varying(30) NOT NULL,
    PRIMARY KEY (id_horario),
    CONSTRAINT fk_tec1 FOREIGN KEY (id_tecnico) REFERENCES public.persona(id_persona) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE SEQUENCE IF NOT EXISTS public.horario_seq increment 1 start 1 OWNED BY horario_atencion.id_horario;
ALTER TABLE ONLY public.horario_atencion ALTER COLUMN id_horario SET DEFAULT nextval('public.horario_seq'::regclass);
--========================================================
-- TIPOS DE ELECTRODOMESTICO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.tipo_electrodomestico
(
    id_tipo_electro integer NOT NULL,
    nom_tipo_electro character varying(50) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_tipo_electro)   
);
CREATE SEQUENCE IF NOT EXISTS public.tipo_electrodomestico_seq increment 1 start 1 OWNED BY tipo_electrodomestico.id_tipo_electro;
ALTER TABLE ONLY public.tipo_electrodomestico ALTER COLUMN id_tipo_electro SET DEFAULT nextval('public.tipo_electrodomestico_seq'::regclass);
---------------------------------------------------------
INSERT INTO public.tipo_electrodomestico(id_tipo_electro, nom_tipo_electro)
	VALUES
	(1, 'Lavadora'),
	(2, 'Lavavajillas'),
	(3, 'Refrigeradora'),
	(4, 'Frigobar'),
	(5, 'Dispensador de agua'),
	(6, 'Cocina a gas'),
	(7, 'Cocina eléctrica'),
	(8, 'Horno eléctrico'),
	(9, 'Horno microondas'),
	(10, 'Extractor/Emprimidor'),
	(11, 'Triturador de basura'),
	(12, 'Aspiradora'),
	(13, 'Aire acondicionado'),
	(14, 'Calefactor'),
	(15, 'Ventilador'),
	(16, 'Secadora/secarropas'),
	(17, 'Plancha'),
	(18, 'Máquina de coser');
SELECT setval('public.tipo_electrodomestico_seq', 19, false);
--========================================================
-- MARCAS DE ELECTRODOMESTICO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.marca
(
    id_marca integer NOT NULL,
    nombre_marca character varying(50) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_marca)   
);
CREATE SEQUENCE IF NOT EXISTS public.marca_seq increment 1 start 0 minvalue 0 OWNED BY marca.id_marca;
ALTER TABLE ONLY public.marca ALTER COLUMN id_marca SET DEFAULT nextval('public.marca_seq'::regclass);
---------------------------------------------------------
INSERT INTO public.marca(id_marca, nombre_marca)
	VALUES
	(0, 'Otro'),
	(1, 'Indurama'),
	(2, 'Coldex'),
	(3, 'General Electric'),
	(4, 'Mabe'),
	(5, 'Bosch'),
	(6, 'Samsung'),
	(7, 'Daewoo'),
	(8, 'LG'),
	(9, 'Westinghouse'),
	(10, 'Frigidaire'),
	(11, 'Sole'),
	(12, 'Brasec'),
	(13, 'Bryant'),
	(14, 'Alfano'),
	(15, 'Electra'),
	(16, 'Coldpoint'),
	(17, 'Hitachi'),
	(18, 'Electrolux'),
	(19, 'Kenmore'),
	(20, 'Klimatic'),
	(21, 'KitchenAid'),
	(22, 'Midea'),
	(23, 'Carrier'),
	(24, 'Lennox'),
	(25, 'York'),
	(26, 'Sanyo'),
	(27, 'Surrey'),
	(28, 'Miray');
SELECT setval('public.marca_seq', 29, false);
--========================================================
-- MARCAS DE ELECTRODOMESTICO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.electro_marca
(
    id_tipo_electro integer NOT NULL,
	id_marca integer NOT NULL,
    PRIMARY KEY (id_tipo_electro, id_marca),
	CONSTRAINT fk_elct FOREIGN KEY (id_tipo_electro) REFERENCES public.tipo_electrodomestico(id_tipo_electro) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT fk_marca FOREIGN KEY (id_marca) REFERENCES public.marca(id_marca) ON UPDATE CASCADE ON DELETE CASCADE
);
INSERT INTO public.electro_marca(id_tipo_electro, id_marca)
VALUES (1, 1),	(1, 4),	(1, 5),	(1, 6),	(1, 7),	(1, 8),	(1, 18), (1, 0);
DO $$
BEGIN
   for tipo in 2..18 loop
	 INSERT INTO public.electro_marca(id_tipo_electro, id_marca)
	 VALUES (tipo, tipo+1),	(tipo, tipo+2),	(tipo, tipo+3), (tipo, 0);
   end loop;
END $$;
--========================================================
-- ELECTRODOMESTICO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.electrodomestico
(
    id_electrodomestico integer NOT NULL,
    nro_serie character varying(20),
    id_tipo_electro integer NOT NULL,
    id_marca integer NOT NULL,
	modelo character varying(40),
	id_propietario integer NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_electrodomestico),
    CONSTRAINT fk_tipo_marca FOREIGN KEY (id_tipo_electro, id_marca) REFERENCES public.electro_marca(id_tipo_electro, id_marca) ON UPDATE CASCADE ON DELETE RESTRICT
);
CREATE SEQUENCE IF NOT EXISTS public.electrodomestico_seq increment 1 start 1 OWNED BY electrodomestico.id_electrodomestico;
ALTER TABLE ONLY public.electrodomestico ALTER COLUMN id_electrodomestico SET DEFAULT nextval('public.electrodomestico_seq'::regclass);
----------------------------------------------------------
INSERT INTO public.electrodomestico(nro_serie, id_tipo_electro, modelo, id_marca, id_propietario)
	VALUES
	('3913511', 1, 'WA17T6260BW', 6, 20),
	('3958671', 7, 'Monet', 9, 21);
SELECT setval('public.marca_seq', 3, false);
--========================================================
-- CATEGORÍA DE PIEZA
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.categoria_pieza
(
    id_categoria integer NOT NULL,
    nombre_cat character varying(50) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_categoria)
);
CREATE SEQUENCE IF NOT EXISTS public.categoria_pieza_seq increment 1 start 1 OWNED BY categoria_pieza.id_categoria;
ALTER TABLE ONLY public.categoria_pieza ALTER COLUMN id_categoria SET DEFAULT nextval('public.categoria_pieza_seq'::regclass);
---------------------------------------------------------
INSERT INTO public.categoria_pieza(id_categoria, nombre_cat)
	VALUES
	(1, 'Repuestos para Lavadoras'),
	(2, 'Repuestos para Licuadoras'),
	(3, 'Repuestos para Refrigeradores'),
	(4, 'Repuestos para cocina'),
	(5, 'Repuestos para Aire acondicionado'),
	(6, 'Repuestos para Aspiradoras'),
	(7, 'Repuestos para Lavaplatos'),
	(8, 'Repuestos para Microondas');
SELECT setval('public.categoria_pieza_seq', 9, false);
--========================================================
-- PIEZAS
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.pieza
(
    id_pieza integer NOT NULL,
    nombre_pieza character varying(200) NOT NULL,
    stock bigint NOT NULL,
    precio_pieza numeric NOT NULL,
    id_categoria integer NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_pieza),
    CONSTRAINT fk_cat FOREIGN KEY (id_categoria) REFERENCES public.categoria_pieza(id_categoria)
);
CREATE SEQUENCE IF NOT EXISTS public.pieza_seq increment 1 start 1 OWNED BY pieza.id_pieza;
ALTER TABLE ONLY public.pieza ALTER COLUMN id_pieza SET DEFAULT nextval('public.pieza_seq'::regclass);
---------------------------------------------------------
INSERT INTO public.pieza(nombre_pieza, stock, precio_pieza, id_categoria)
	VALUES 
	('Manguera de entrada de lavadora de goma negra, 3/4 pulgadas x 5 pies', 300, 27.00, 1),
	('Tapa De Vaso Para Licuadora Oster Flexible Nacional', 500, 10.00, 2),
	('Timer Para Refrigerador Sankyo 220v 8 Horas Ge Mabe Wr9x553', 1000, 27.50, 3),
	('Valvula De Carga De Servicio Para Refrigeración 10 cm importado 887702', 220, 5.00, 3),
	('Bomba electromagnética de desagüe de lavadora Askoll 35W 220V 60HZ', 144, 169.90, 1),
	('Cuchilla para Sistema de Nutrición Oster Xpert Series BLSTXPN7002/7003', 2000, 108.00, 2),
	('Chisperos Para Cocina', 750, 77.00, 4),
	('Filtro De Carbón Campana Indurama', 80, 70.00, 4),
	('Juego de Limpieza Profeisional NT DN 40', 1000, 280.50, 6),
	('Kit Instalacion Lavaplatos', 500, 58.90, 7),
	('Condensador para horno microondas Sharp', 120, 146.00, 8),
	('Botón plateado para horno microondas Bosch', 280, 24.00, 8);
--========================================================
-- CITAS & ATENCIONES TALLER/DOMICILIO
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.atencion
(
    id_atencion integer NOT NULL,
    id_electro integer NOT NULL,
    id_horario integer NOT NULL,
    fecha_reserva_cita date,
    tipo character varying(30) NOT NULL,		-- En taller / A domicilio
	estado_atencion character varying(30) NOT NULL,
    falla_descrita text,
	monto_total numeric,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_atencion),
    CONSTRAINT fk_hor FOREIGN KEY (id_horario) REFERENCES public.horario_atencion(id_horario) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_elct FOREIGN KEY (id_electro) REFERENCES public.electrodomestico(id_electrodomestico) ON UPDATE CASCADE ON DELETE RESTRICT
);
CREATE SEQUENCE IF NOT EXISTS public.atencion_seq increment 1 start 1 OWNED BY atencion.id_atencion;
ALTER TABLE ONLY public.atencion ALTER COLUMN id_atencion SET DEFAULT nextval('public.atencion_seq'::regclass);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.detalle_atencion
(
 	id_atencion integer NOT NULL,
	id_servicio integer NOT NULL,
	monto_servicio numeric,
	observacion_tec text,
	estado_completo boolean NOT NULL DEFAULT false,
	PRIMARY KEY (id_atencion, id_servicio),
	CONSTRAINT fk_serv FOREIGN KEY (id_servicio) REFERENCES public.servicio(id_servicio) ON UPDATE CASCADE ON DELETE RESTRICT
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.detalle_actividades
(
	id_atencion integer NOT NULL,
	id_servicio integer NOT NULL,
	id_actividad integer,
	PRIMARY KEY (id_atencion, id_servicio, id_actividad),
	CONSTRAINT fk_deta FOREIGN KEY (id_atencion, id_servicio) REFERENCES public.detalle_atencion(id_atencion, id_servicio),
	CONSTRAINT fk_acv FOREIGN KEY (id_actividad) REFERENCES public.actividades_servicio(id_actividad) ON UPDATE CASCADE ON DELETE RESTRICT
);
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.detalle_piezas_usadas
(
	id_atencion integer NOT NULL,
	id_servicio integer NOT NULL,
	id_pieza integer,
	cantidad integer,
	PRIMARY KEY (id_atencion, id_servicio, id_pieza),
	CONSTRAINT fk_detp FOREIGN KEY (id_atencion, id_servicio) REFERENCES public.detalle_atencion(id_atencion, id_servicio),
	CONSTRAINT fk_pza FOREIGN KEY (id_pieza) REFERENCES public.pieza(id_pieza) ON UPDATE CASCADE ON DELETE RESTRICT
);
----------------------------------------------------------
/*********************************************************
  SCRIPT : VISTAS: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
--	PERSONAS
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_clientes
WITH (  security_barrier=true) 
AS
	select C.id_persona, U.id_user, 
	Rtrim(replace(concat(C.nombre_1,' ',C.nombre_2,' ',C.apellido_1,' ',C.apellido_2),'  ',' ')) as nombres,
	C.telefono, D.nombre_distrito, C.direccion, U.email, C.estado_activ
	from public.persona C inner join public.usuario U on C.id_persona = U.id_persona
	left join public.distrito D on C.id_distrito = D.id_distrito
	where U.id_rol=1 order by U.id_user;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_encargados
WITH (  security_barrier=true) 
AS
	select E.id_persona, U.id_user, 
	Rtrim(replace(concat(E.nombre_1,' ',E.nombre_2,' ',E.apellido_1,' ',E.apellido_2),'  ',' ')) as nombres,
	E.telefono, D.nombre_distrito, E.direccion, U.email, E.estado_activ
	from public.persona E inner join public.usuario U on E.id_persona = U.id_persona
	left join public.distrito D on E.id_distrito = D.id_distrito
	where U.id_rol=2;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_tecnicos
WITH (  security_barrier=true) 
AS
	select T.id_persona, U.id_user, 
	Rtrim(replace(concat(T.nombre_1,' ',T.nombre_2,' ',T.apellido_1,' ',T.apellido_2),'  ',' ')) as nombres,
	'Especialista en '||string_agg(S.nombre_pl, ', ') as especialidad,
	T.telefono, D.nombre_distrito, T.direccion, U.email, T.foto, T.estado_activ
	from public.persona T inner join public.usuario U on T.id_persona = U.id_persona
	left join public.tecnico_especialidad E on E.id_tecnico = T.id_persona
	left join public.servicio S on E.id_servicio = S.id_servicio
	left join public.distrito D on T.id_distrito = D.id_distrito
	where U.id_rol=3
	group by T.id_persona, U.id_user, nombres, T.telefono, D.nombre_distrito, T.direccion, U.email, T.foto, T.estado_activ
	order by U.id_user;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_especialidades
WITH (  security_barrier=true) 
AS
	select id_servicio as id_especialidad, 'Especialista en '||nombre_pl as especialidad from servicio
	where id_servicio in (3,4,5,6,7,9);
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_electrodomesticos
WITH (  security_barrier=true) 
AS
	select E.id_electrodomestico, E.nro_serie, TE.nom_tipo_electro as tipo,
	E.modelo, M.nombre_marca as marca, 
	E.id_propietario, C.nombres as propietario, E.estado_activ
	from electrodomestico E inner join tipo_electrodomestico TE on TE.id_tipo_electro = E.id_tipo_electro 
	inner join marca M on E.id_marca = M.id_marca
	inner join v_clientes C on C.id_persona = E.id_propietario;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_piezas
WITH (  security_barrier=true) 
AS
	select P.id_pieza, P.nombre_pieza, P.id_categoria, C.nombre_cat, P.precio_pieza, P.stock, P.estado_activ
	from pieza P inner join categoria_pieza C on P.id_categoria = C.id_categoria;
----------------------------------------------------------


----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_citas
WITH (  security_barrier=true)
AS
 SELECT a.id_atencion,
    c.id_persona AS id_cliente,
    a.id_electro,
    t.id_persona AS id_tecnico,
    a.fecha_reserva_cita,
    h.fecha_atencion,
    h.hora_inicio,
    a.tipo,
    a.falla_descrita,
	a.estado_atencion
   FROM atencion a
     JOIN horario_atencion h ON a.id_horario = h.id_horario
     JOIN electrodomestico e ON e.id_electrodomestico = a.id_electro
     LEFT JOIN persona t ON t.id_persona = h.id_tecnico
     LEFT JOIN persona c ON c.id_persona = e.id_propietario
  WHERE a.estado_atencion::text = 'Pendiente'::text AND a.estado_activ;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_citas_domicilio
WITH (  security_barrier=true) 
AS
select A.id_atencion,
C.id_persona as id_cliente,
C.nombres as nombre_cliente,
concat(C.nombre_distrito,', ',c.direccion) as direc_cliente,
E.tipo as tipo_electro,
T.id_persona as id_tecnico, T.nombres as nombre_tecnico,
H.fecha_atencion, H.hora_inicio, A.tipo as lugar
from atencion A inner join horario_atencion H on A.id_horario = H.id_horario 
inner join v_electrodomesticos E on E.id_electrodomestico = A.id_electro
left join v_tecnicos T on T.id_persona = H.id_tecnico
left join v_clientes C on C.id_persona = E.id_propietario  
where estado_atencion = 'Pendiente'
and A.estado_activ;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_atenciones_finalizadas
WITH (
  security_barrier=true
) 
AS
select A.id_atencion, H.fecha_atencion, H.hora_inicio as hora,
T.id_persona as id_tecnico, Rtrim(replace(concat(T.nombre_1,' ',T.nombre_2,' ',T.apellido_1,' ',T.apellido_2),'  ',' ')) as tecnico,
C.id_persona as id_cliente, Rtrim(replace(concat(C.nombre_1,' ',C.nombre_2,' ',C.apellido_1,' ',C.apellido_2),'  ',' ')) as cliente,
TE.nom_tipo_electro as electrodomestico, M.nombre_marca as marca,
string_agg(S.nombre_serv, ', ') as servicios,
A.monto_total
from atencion A
inner join horario_atencion H on A.id_horario = H.id_horario 
inner join electrodomestico E on A.id_electro = E.id_electrodomestico
left join persona T on T.id_persona = H.id_tecnico
left join persona C on C.id_persona = E.id_propietario 
left join tipo_electrodomestico TE on TE.id_tipo_electro = E.id_tipo_electro
left join marca M on M.id_marca = E.id_marca
left join detalle_atencion D on A.id_atencion = D.id_atencion
left join servicio S on D.id_servicio = S.id_servicio
where estado_atencion = 'Finalizado' and A.estado_activ
group by A.id_atencion, H.fecha_atencion, hora, T.id_persona, C.id_persona, tecnico, cliente, electrodomestico, marca, monto_total;
----------------------------------------------------------
/*********************************************************
  SCRIPT : FUNCIONES: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_validar_acceso(user_rol integer, correo character varying, contrasena text)
RETURNS TABLE(id_persona integer, id_user char(10), rol character varying, nombre_completo character varying, correo character varying, foto character varying)
AS 
$$ 
select 
P.id_persona, U.id_user, R.nombre_rol,
Rtrim(replace(concat(P.nombre_1,' ',P.nombre_2,' ',P.apellido_1,' ',P.apellido_2),'  ',' ')) as nombres,
U.email, P.foto
from public.usuario U inner join public.persona P on P.id_persona = U.id_persona
inner join public.roles R on U.id_rol = R.id_rol
where U.id_rol = user_rol and U.email = correo and U.contra = contrasena and U.estado_activ;
$$
LANGUAGE SQL;
----------------------------------------------------------
--	CONSULTAS
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_cliente(id_cliente integer)
RETURNS TABLE(id_cliente integer, id_user char(10), nom1 character varying, nom2 character varying, ape1 character varying, ape2 character varying,
			  id_tdoc integer, nro_doc character varying, telefono character varying(9), id_distrito integer, direccion text,
			  email character varying, contra text, foto character varying, estado boolean)
AS 
$$ 
select
C.id_persona, U.id_user,
C.nombre_1,C.nombre_2,C.apellido_1,C.apellido_2,
C.id_tipo_doc, C.nro_doc,
C.telefono,
C.id_distrito, C.direccion,
U.email, U.contra, C.foto, C.estado_activ
from persona C inner join usuario U on C.id_persona = U.id_persona
where U.id_rol=1 and C.id_persona = id_cliente
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_encargado(id_encargado integer)
RETURNS TABLE(id_enc integer, id_user char(10), nom1 character varying, nom2 character varying, ape1 character varying, ape2 character varying,
			  id_tdoc integer, nro_doc character varying, telefono character varying, id_distrito integer, direccion text,
			  email character varying, contra text, foto character varying, estado boolean)
AS 
$$ 
select
E.id_persona, U.id_user,
E.nombre_1,E.nombre_2,E.apellido_1,E.apellido_2,
E.id_tipo_doc, E.nro_doc,
E.telefono,
E.id_distrito, E.direccion,
U.email, U.contra, E.foto, E.estado_activ
from persona E inner join usuario U on E.id_persona = U.id_persona
where U.id_rol=2 and E.id_persona = id_encargado
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_tecnico(id_tecnico integer)
RETURNS TABLE(id_tec integer, id_user char(10), nom1 character varying, nom2 character varying, ape1 character varying, ape2 character varying,
			  id_tdoc integer, nro_doc character varying, arr_especialidad integer[], a_exp integer,
			  telefono character varying, id_distrito integer, direccion text,
			  email character varying, contra text, foto character varying, estado boolean)
AS 
$$ 
select
T.id_persona, U.id_user,
T.nombre_1, T.nombre_2, T.apellido_1, T.apellido_2,
T.id_tipo_doc, T.nro_doc,
array_agg(E.id_servicio) as arr_especialidad,
T.anios_experiencia,
T.telefono, T.id_distrito, T.direccion,
U.email, U.contra, T.foto, T.estado_activ
from persona T inner join usuario U on T.id_persona = U.id_persona
left join tecnico_especialidad E on E.id_tecnico = T.id_persona
where U.id_rol=3 and T.id_persona = $1
group by T.id_persona, U.id_user, T.nombre_1, T.nombre_2, T.apellido_1, T.apellido_2, T.id_tipo_doc, T.nro_doc, T.anios_experiencia,
T.telefono, T.id_distrito, T.direccion, U.email, U.contra, T.foto, T.estado_activ
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_horario(id_hora integer)
RETURNS TABLE
(id_hora integer, 
 tecnico character varying, 
 especialidad character varying, 
 telefono character varying,
 foto character varying,
 fecha date, 
 hora time)
AS 
$$ 			  
select H.id_horario, 
T.nombres,T.especialidad,T.telefono,T.foto,
H.fecha_atencion, H.hora_inicio
from v_tecnicos T inner join horario_atencion H on H.id_tecnico = T.id_persona
where H.id_horario = id_hora;
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_horarios_x_tecnico(id_tec integer)
    RETURNS TABLE(id_horario integer, id_tecnico integer, fecha_atencion date, hora_inicio time, estado character varying) 
AS $$
	select H.* from persona T inner join horario_atencion H on H.id_tecnico = T.id_persona
	left join usuario U on U.id_persona = T.id_persona where U.id_rol = 3 and H.fecha_atencion >= CURRENT_DATE and id_tecnico = $1;
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_tecnicos_con_horario(mes integer, anyo integer)
    RETURNS TABLE(id_persona integer, nombres character varying) 
AS $$
	select distinct VT.id_persona, VT.nombres from 
	v_tecnicos VT right join horario_atencion H 
	on VT.id_persona = H.id_tecnico 
	where EXTRACT(MONTH FROM H.fecha_atencion) = mes and EXTRACT(YEAR FROM h.fecha_atencion) = anyo
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_pieza(id_pieza integer)
RETURNS TABLE
(	id integer,	nombre_pieza character varying, id_categoria integer, nom_categoria character varying,
 	precio numeric, stock bigint, estado boolean)
AS 
$$ 
select P.id_pieza, P.nombre_pieza, P.id_categoria, C.nombre_cat, P.precio_pieza, P.stock, P.estado_activ
from pieza P inner join categoria_pieza C on P.id_categoria = C.id_categoria
where id_pieza=$1
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_resumen_atencion(id_aten integer)
RETURNS table (id_atencion integer, nombre_cliente text, email character varying, telefono character varying, distrito character varying,
			   direccion text,
			   fecha_atencion date, id_servicio integer, nombre_serv character varying, nro_serie character varying,
			   tipo_electro character varying, modelo character varying, marca character varying, 
			   hora_inicio time, lugar character varying, falla_descrita text, fecha_reserva_cita date, estado_atencion character varying)
AS 
$$
DECLARE
	id_diag integer;
	id_visit integer;
BEGIN
select s.id_servicio into id_visit from public.servicio s where s.nombre_serv like 'Visita%';
select s.id_servicio into id_diag from public.servicio s where s.nombre_serv like 'Diagn_stico%';

RETURN query 
	SELECT ci.id_atencion,
    cli.nombres,
	cli.email,
    cli.telefono,
    cli.nombre_distrito,
    cli.direccion,
    ci.fecha_atencion,
	s.id_servicio,
    s.nombre_serv,
    e.nro_serie,
    e.tipo AS tipo_electro,
    e.modelo,
    e.marca,
    ci.hora_inicio,
    ci.tipo,
    ci.falla_descrita,
    ci.fecha_reserva_cita,
	ci.estado_atencion
   FROM v_clientes cli
     JOIN v_citas ci ON cli.id_persona = ci.id_cliente
     JOIN detalle_atencion d ON d.id_atencion = ci.id_atencion
     JOIN servicio s ON d.id_servicio = s.id_servicio
     JOIN v_electrodomesticos e ON e.id_electrodomestico = ci.id_electro
	 where ci.id_atencion=$1 and d.id_servicio not in (id_diag, id_visit);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
--	INSERCIONES
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_generar_id_usuario(rol integer)
RETURNS char(10)
AS 
$$
DECLARE
	prefix char(3);
	numero integer;
	cifras integer;
BEGIN
	IF rol = 1	THEN prefix = 'CLI';
	ELSEIF rol = 2	THEN prefix = 'ENC';
	ELSEIF rol = 3	THEN prefix = 'TEC';
	END IF;
	select max(cast(right(id_user, 6) as integer))+1 into numero from usuario where id_rol = rol;
	cifras = length(numero||'');
	return concat(prefix,'-',repeat('0',6-cifras),numero);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
--	REPORTES
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_reportes_x_tecnico(id_tec integer, fecha_1 date, fecha_2 date DEFAULT CURRENT_DATE)
RETURNS TABLE(id_atencion integer, fecha_atencion date, hora time, tecnico character varying, cliente character varying, 
			  electrodomestico character varying, marca character varying, servicios character varying, monto_total numeric)
AS 
$$
select id_atencion, fecha_atencion, hora, tecnico, cliente, electrodomestico, marca, servicios, monto_total
from v_atenciones_finalizadas
where id_tecnico = id_tec
and fecha_atencion between fecha_1 and fecha_2
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_reportes_x_cliente(id_cli integer, fecha_1 date, fecha_2 date DEFAULT CURRENT_DATE, monto_1 numeric DEFAULT 0.00, monto_2 numeric DEFAULT 99999999.99)
RETURNS TABLE(id_atencion integer, fecha_atencion date, hora time, tecnico character varying, cliente character varying, 
			  electrodomestico character varying, marca character varying, servicios character varying, monto_total numeric)
AS 
$$
select id_atencion, fecha_atencion, hora, tecnico, cliente, electrodomestico, marca, servicios, monto_total
from v_atenciones_finalizadas
where id_cliente = id_cli
and fecha_atencion between fecha_1 and fecha_2
and monto_total between monto_1 and monto_2
$$
LANGUAGE SQL;
----------------------------------------------------------
--	HOJA DE SERVICIO
----------------------------------------------------------
-- CABECERA
CREATE OR REPLACE FUNCTION public.f_cabecera_reporte(id_aten integer)
RETURNS TABLE (id_atencion integer, fecha_atencion date, hora_inicio time, fecha_reserva date,
			  tecnico text, cliente text, electrodomestico character varying,
			  marca character varying, total numeric)
AS 
$$
BEGIN
RETURN query 
select A.id_atencion, H.fecha_atencion, H.hora_inicio, A.fecha_reserva_cita,
Rtrim(replace(concat(T.nombre_1,' ',T.nombre_2,' ',T.apellido_1,' ',T.apellido_2),'  ',' ')) as tecnico,
Rtrim(replace(concat(C.nombre_1,' ',C.nombre_2,' ',C.apellido_1,' ',C.apellido_2),'  ',' ')) as cliente,
TE.nom_tipo_electro, M.nombre_marca, A.monto_total
from atencion A
inner join horario_atencion H on A.id_horario = H.id_horario 
inner join electrodomestico E on A.id_electro = E.id_electrodomestico
left join persona T on T.id_persona = H.id_tecnico
left join persona C on C.id_persona = E.id_propietario 
left join tipo_electrodomestico TE on TE.id_tipo_electro = E.id_tipo_electro
left join marca M on M.id_marca = E.id_marca
where estado_atencion = 'Finalizado' and A.estado_activ
and A.id_atencion = $1
group by A.id_atencion, H.fecha_atencion, H.hora_inicio, A.fecha_reserva_cita, tecnico, cliente, TE.nom_tipo_electro, M.nombre_marca, A.monto_total;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
-- CUERPO
CREATE OR REPLACE FUNCTION public.f_cuerpo_reporte(id_aten integer)
RETURNS TABLE (id_atencion integer, servicio character varying, "actividad/pieza" character varying, precio numeric)
AS 
$$
DECLARE
	id_diag integer;
	id_visit integer;
	id_venta integer;
BEGIN
select s.id_servicio into id_visit from public.servicio s where s.nombre_serv like 'Visita%';
select s.id_servicio into id_diag from public.servicio s where s.nombre_serv like 'Diagn_stico%';
select s.id_servicio into id_venta from public.servicio s where s.nombre_serv like 'Venta%';

RETURN query 
select DAT.id_atencion,S.nombre_serv, AC.nombre_actividad as col, 
CASE
WHEN DAT.id_servicio =  id_diag or  DAT.id_servicio =  id_visit THEN DAT.monto_servicio
ELSE AC.precio
END

FROM detalle_atencion DAT
inner join servicio S on DAT.id_servicio = S.id_servicio
left join detalle_actividades DAC on DAC.id_atencion = DAT.id_atencion and DAC.id_servicio = DAT.id_servicio
left join actividades_servicio AC on DAC.id_actividad = AC.id_actividad 
where DAT.id_atencion = $1 and DAT.id_servicio <> id_venta
UNION
select DAT.id_atencion,S.nombre_serv, P.nombre_pieza, P.precio_pieza
FROM detalle_atencion DAT
inner join servicio S on DAT.id_servicio = S.id_servicio
inner join detalle_piezas_usadas DPU on DPU.id_atencion = DAT.id_atencion and DPU.id_servicio = DAT.id_servicio
left join pieza P on DPU.id_pieza = P.id_pieza 
where DAT.id_atencion = $1
order by col desc;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
/*********************************************************
  SCRIPT : PROCEDIMIENTOS: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_horario
(	IN id_tecnico integer,
	IN fecha date,
	IN hora time without time zone)
AS $$
	INSERT INTO public.horario_atencion
	(id_tecnico, fecha_atencion, hora_inicio, estado)
		VALUES
	($1, $2, $3, 'Disponible');
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_cliente
(	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
	nro_doc character varying default null,
	tel character varying default null,
	id_distrito integer default null, 
	direccion text default null,
	correo character varying default null,
	contrasena text default null,
	foto character varying default null) 
AS 
$$
DECLARE
	id_per_cli integer;
	id_user_cli char(10);
BEGIN
	INSERT INTO public.persona
	(	nombre_1, nombre_2, apellido_1, apellido_2, 
		id_tipo_doc, nro_doc, telefono, id_distrito, direccion, foto)
	VALUES
		($1, $2, $3, $4, $5, $6, $7, $8, $9, $12);
	SELECT max(id_persona) into id_per_cli from public.persona;
	SELECT f_generar_id_usuario(1) into id_user_cli;
	INSERT INTO public.usuario
		(id_user, id_rol, id_persona, email, contra)
	VALUES 
		(id_user_cli, 1, id_per_cli, $10, $11);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_encargado
(	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
	nro_doc character varying default null,
	tel character varying default null,
	id_distrito integer default null, 
	direccion text default null,
	correo character varying default null,
	contrasena text default null, 
 	fec_ingreso date default CURRENT_DATE,
 	foto character varying default null) 
AS 
$$
DECLARE
	id_per_enc integer;
	id_user_enc char(10);
BEGIN
	INSERT INTO public.persona
	(	nombre_1, nombre_2, apellido_1, apellido_2, 
		id_tipo_doc, nro_doc, telefono, id_distrito, direccion, fecha_ingreso, foto)
	VALUES
		($1, $2, $3, $4, $5, $6, $7, $8, $9, $12, $13);
	SELECT max(id_persona) into id_per_enc from public.persona;
	SELECT f_generar_id_usuario(2) into id_user_enc;
	INSERT INTO public.usuario
		(id_user, id_rol, id_persona, email, contra)
	VALUES 
		(id_user_enc, 2, id_per_enc, $10, $11);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_tecnico
(	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
	nro_doc character varying default null,
	tel character varying default null,
	id_distrito integer default null, 
	direccion text default null,
	correo character varying default null,
	contrasena text default null,
 	id_serv_esp integer default null,
 	a_exp integer default null,
 	fec_ingreso date default CURRENT_DATE,
 	foto character varying default null)
AS 
$$
DECLARE
	id_per_tec integer;
	id_user_tec char(10);
BEGIN
	INSERT INTO public.persona
	(	nombre_1, nombre_2, apellido_1, apellido_2, 
		id_tipo_doc, nro_doc, telefono, id_distrito, direccion, anios_experiencia, fecha_ingreso, foto)
	VALUES
		($1, $2, $3, $4, $5, $6, $7, $8, $9, $13, $14, $15);
	SELECT max(id_persona) into id_per_tec from public.persona;
	INSERT INTO tecnico_especialidad (id_tecnico, id_servicio) VALUES (id_per_tec, $12);
	SELECT f_generar_id_usuario(3) into id_user_tec;
	INSERT INTO public.usuario
		(id_user, id_rol, id_persona, email, contra)
	VALUES 
		(id_user_tec, 3, id_per_tec, $10, $11);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_electrodomestico
(	nro_serie character varying default null,
	id_tipo_electro integer default null,
	modelo character varying default null,
	id_marca integer default null,
 	id_propietario integer default null,
 	estado_activ boolean default true
)
AS
$$
INSERT INTO public.electrodomestico
	(nro_serie, id_tipo_electro, modelo, id_marca, id_propietario, estado_activ)
VALUES 
($1, $2, $3, $4, $5, $6);
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nueva_pieza
(	nombre character varying,
 	id_cat integer,
 	precio numeric, 
 	stock bigint)
AS 
$$
INSERT INTO public.pieza
(nombre_pieza, id_categoria, precio_pieza, stock)
VALUES
($1, $2, $3, $4);
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nueva_cita
( 	id_electro integer,
 	id_horario integer,
 	id_serv integer,
 	lugar character varying,
 	falla text,
 	fecha_reserva date default CURRENT_DATE)
AS 
$$
DECLARE
	id_cita integer;
	id_diag integer;
	id_visit integer;
BEGIN
INSERT INTO public.atencion
(id_electro, id_horario, tipo, falla_descrita, fecha_reserva_cita, estado_atencion)
VALUES
($1, $2, $4, $5, $6, 'Pendiente');
SELECT max(id_atencion) into id_cita from public.atencion;

-- Insertar servicios de visita, diagnóstico y servicio principal
select id_servicio into id_visit from public.servicio where nombre_serv like 'Visita%';
select id_servicio into id_diag from public.servicio where nombre_serv like 'Diagn_stico%';

INSERT INTO public.detalle_atencion(id_atencion, id_servicio, estado_completo)
VALUES 
(id_cita, id_visit, false),
(id_cita, id_serv, false),
(id_cita, id_diag, false);

-- Actualizar horario del técnico
UPDATE public.horario_atencion
set estado = 'Reservado' where horario_atencion.id_horario = $2;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_agregar_venta(id_aten integer, monto numeric)
AS 
$$
DECLARE
	id_serv_venta integer;
BEGIN
select id_servicio into id_serv_venta from public.servicio where nombre_serv like 'Venta%';
IF NOT EXISTS (
	select * from public.detalle_atencion 
	where id_atencion = id_aten and id_servicio=id_serv_venta) 
THEN
	INSERT INTO public.detalle_atencion(id_atencion, id_servicio, monto_servicio, estado_completo)
		VALUES (id_aten, id_serv_venta, monto, true);
END IF;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_uso_pieza(id_aten integer, id_pza integer, cant bigint)
AS 
$$
DECLARE
	id_venta integer;
BEGIN
select s.id_servicio into id_venta from public.servicio s where s.nombre_serv like 'Venta%';
INSERT INTO public.detalle_piezas_usadas(id_atencion, id_servicio, id_pieza, cantidad)
	VALUES (id_aten, id_venta, id_pza, cant);
UPDATE public.pieza set stock = stock-cant;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_agregar_actividad(id_aten integer, id_serv integer, id_activi integer)
AS 
$$
BEGIN
IF NOT EXISTS (
	select * from public.detalle_actividades 
	where id_atencion = id_aten and id_servicio=id_serv and id_actividad=id_activi) 
	THEN
    INSERT INTO public.detalle_actividades(id_atencion, id_servicio, id_actividad)
	VALUES (id_aten, id_serv, id_activi);
END IF;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
--	ACTUALIZACIONES
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_fin_atencion_domicilio(id_aten integer, id_serv integer, 
															 pres_aceptado boolean, c_visita numeric, c_diag numeric, c_serv numeric)
AS 
$$
DECLARE
	id_diag integer;
	id_visit integer;
	monto numeric;
	total numeric=0;
BEGIN

select id_servicio into id_visit from public.servicio where nombre_serv like 'Visita%';
select id_servicio into id_diag from public.servicio where nombre_serv like 'Diagn_stico%';

update detalle_atencion set monto_servicio = c_visita, estado_completo = true where id_atencion = id_aten and id_servicio = id_visit;
update detalle_atencion set monto_servicio = c_diag, estado_completo = true where id_atencion = id_aten and id_servicio = id_diag;
update detalle_atencion set monto_servicio = c_serv where id_atencion = id_aten and id_servicio = id_serv;

IF pres_aceptado THEN
	update detalle_atencion set estado_completo = true where id_atencion = id_aten and id_servicio = id_serv;
ELSE
	update detalle_atencion set observacio_tec = 'Presupuesto no aceptado' where id_atencion = id_aten and id_servicio = id_serv;
END IF;

FOR monto IN select monto_servicio from detalle_atencion where id_atencion = id_aten
	loop
	total = total+COALESCE(monto, 0);
end loop;

update atencion set monto_total = total, estado_atencion='Finalizado' where id_atencion = id_aten;

END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_cliente
(	id_cliente integer,
 	id_usuario character,
 	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
 	doc character varying default null,
 	tel character varying default null,
 	id_distr integer default null, 
	direcc text default null,
 	correo character varying default null,
 	contrasena text default null,
 	estado boolean default true,
 	new_foto character varying default null) 
AS 
$$
BEGIN
	UPDATE public.persona
	set nombre_1=nom_1, nombre_2=nom_2, apellido_1=ape_1, apellido_2=ape_2, 
	id_tipo_doc=id_tdoc, nro_doc=doc, telefono=tel, id_distrito=id_distr, direccion=direcc, foto=new_foto, estado_activ=estado
	where id_persona = id_cliente;

	UPDATE public.usuario
	set email=correo, contra=contrasena, estado_activ=estado
	where id_user = id_usuario;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_encargado
(	id_encargado integer,
 	id_usuario character,  	
 	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
 	doc character varying default null,
 	tel character varying default null,
 	id_distr integer default null, 
	direcc text default null,
 	correo character varying default null,
 	contrasena text default null,
 	fec_ingreso date default null,	
 	fec_baja date default null,	
 	estado boolean default true,
 	new_foto character varying default null)
AS 
$$
BEGIN
	UPDATE public.persona
	set nombre_1=nom_1, nombre_2=nom_2, apellido_1=ape_1, apellido_2=ape_2, 
	id_tipo_doc=id_tdoc, nro_doc=doc, telefono=tel, id_distrito=id_distr, direccion=direcc, 
	fecha_ingreso=fec_ingreso, fecha_baja=fec_baja,
	foto=new_foto, estado_activ=estado
	where id_persona = id_encargado;

	UPDATE public.usuario
	set email=correo, contra=contrasena, estado_activ=estado
	where id_user = id_usuario;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_tecnico
(	id_tecnico integer,
 	id_usuario character,  	
 	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
 	doc character varying default null,
 	tel character varying default null,
 	id_distr integer default null, 
	direcc text default null,
 	correo character varying default null,
 	contrasena text default null,
	id_esp integer default null,
 	a_exp integer default null,	 
 	fec_ingreso date default null,	
 	fec_baja date default null,	
 	estado boolean default true,
 	new_foto character varying default null)
AS 
$$
BEGIN
	UPDATE public.persona
	set nombre_1=nom_1, nombre_2=nom_2, apellido_1=ape_1, apellido_2=ape_2, 
	id_tipo_doc=id_tdoc, nro_doc=doc, telefono=tel, id_distrito=id_distr, direccion=direcc,
	anios_experiencia=a_exp, fecha_ingreso=fec_ingreso, fecha_baja=fec_baja,
	foto=new_foto, estado_activ=estado
	where id_persona = id_tecnico;

	UPDATE public.usuario
	set email=correo, contra=contrasena, estado_activ=estado
	where id_user = id_usuario;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_pieza
(	id_pieza integer,
 	nombre character varying,
 	id_cat integer,
 	precio numeric, 
 	stock bigint,
 	estado boolean default true)
AS 
$$
	UPDATE public.pieza
	set nombre_pieza=$2, id_categoria=$3, precio_pieza=$4, stock=$5, estado_activ=$6
	where id_pieza=$1;
$$
LANGUAGE SQL;

----------------------------------------------------------
--  BORRADO LÓGICO (estado=false)
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_cambiar_estado_persona(id_per integer, estado boolean)
AS 
$$
BEGIN
	UPDATE public.persona
	set estado_activ = estado
	where id_persona = id_per;

	UPDATE public.usuario
	set estado_activ = estado
	where id_persona = id_per;
END
$$
LANGUAGE plpgsql;
---------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_cambiar_estado_pieza(id integer, estado boolean)
AS 
$$
BEGIN
	UPDATE public.pieza
	set estado_activ = estado
	where id_pieza = id;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_cambiar_estado_electrodomestico(id integer, estado boolean)
AS 
$$
BEGIN
	UPDATE public.electrodomestico
	set estado_activ = estado
	where id_electrodomestico = id;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_desactivar_horarios_pasados()
AS 
$$
	UPDATE horario_atencion 
	set estado = 'Desactivado'
	where (fecha_atencion + hora_inicio + interval '30 minutes') <= LOCALTIMESTAMP and estado = 'Disponible';
$$
LANGUAGE SQL;
----------------------------------------------------------