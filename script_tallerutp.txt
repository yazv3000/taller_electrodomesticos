/*********************************************************
   SCRIPT : CREACIÓN DE LA BD: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.servicio
(
    id_servicio serial NOT NULL,
    nombre_serv character varying(50) NOT NULL,
    descripcion text NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
	foto_serv character varying(200),
	PRIMARY KEY (id_servicio)
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.actividades_servicio
(
	id_actividad serial NOT NULL,
	id_servicio integer NOT NULL,
    nombre_actividad character varying(200) NOT NULL,
	precio numeric NOT NULL,
	PRIMARY KEY (id_actividad),
	CONSTRAINT fk_ser FOREIGN KEY (id_servicio) REFERENCES public.servicio(id_servicio) ON UPDATE CASCADE ON DELETE RESTRICT
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.tipo_documento
(
    id_tipo_doc serial NOT NULL,
    nom_tipo_doc character varying(30) NOT NULL,
    PRIMARY KEY (id_tipo_doc)
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.distrito
(
	id_distrito serial NOT NULL,
    nombre_distrito character varying(40) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_distrito)
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.roles
(
    id_rol serial NOT NULL,
	nombre_rol character varying(30) NOT NULL,
	PRIMARY KEY (id_rol)
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.especialidad
(
    id_especialidad serial NOT NULL,
    nombre_esp character varying(80) NOT NULL,
    estado_activ boolean NOT NULL DEFAULT true,
	PRIMARY KEY (id_especialidad)
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.persona
(
    id_persona serial NOT NULL,
    nombre_1 character varying(30) NOT NULL,
	nombre_2 character varying(30),
    apellido_1 character varying(30) NOT NULL,
    apellido_2 character varying(30),
    id_tipo_doc integer NOT NULL,
    nro_doc character varying(15) NOT NULL,
	telefono character varying(9) NOT NULL,
	id_distrito integer NOT NULL,
    direccion text NOT NULL,
	id_especialidad integer,
	anios_experiencia integer,
	fecha_ingreso date,
	fecha_baja date,
	foto character varying(200),
    estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_persona),
	CONSTRAINT fk_tdoc FOREIGN KEY (id_tipo_doc) REFERENCES public.tipo_documento(id_tipo_doc) ON UPDATE CASCADE ON DELETE RESTRICT,
	CONSTRAINT fk_distr FOREIGN KEY (id_distrito) REFERENCES public.distrito(id_distrito) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_esp FOREIGN KEY (id_especialidad) REFERENCES public.especialidad(id_especialidad) ON UPDATE CASCADE ON DELETE RESTRICT
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.usuario
(
    id_user char(10) NOT NULL,
	id_rol integer NOT NULL,
	id_persona integer NOT NULL,
    email character varying(254) NOT NULL,
    contra text NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_user),
	CONSTRAINT fk_rol FOREIGN KEY (id_rol) REFERENCES public.roles(id_rol) ON UPDATE CASCADE ON DELETE RESTRICT,
	CONSTRAINT fk_per FOREIGN KEY (id_persona) REFERENCES public.persona(id_persona) ON UPDATE CASCADE ON DELETE CASCADE
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.horario_atencion
(
    id_horario serial NOT NULL,
    id_tecnico integer NOT NULL,
    fecha_atencion date NOT NULL,
    hora_inicio time NOT NULL,
	estado character varying(30) NOT NULL,
    PRIMARY KEY (id_horario),
    CONSTRAINT fk_hat FOREIGN KEY (id_tecnico) REFERENCES public.persona(id_persona) ON UPDATE CASCADE ON DELETE CASCADE
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.tipo_electrodomestico
(
    id_tipo_electro serial NOT NULL,
    nom_tipo_electro character varying(50) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_tipo_electro)   
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.marca
(
    id_marca serial NOT NULL,
    nombre_marca character varying(50) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_marca)   
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.electrodomestico
(
    id_electrodomestico serial NOT NULL,
    nro_serie character varying(20),
    id_tipo_electro integer NOT NULL,
	modelo character varying(40),
    id_marca integer NOT NULL,
	id_propietario integer NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_electrodomestico),
    CONSTRAINT fk_telec FOREIGN KEY (id_tipo_electro) REFERENCES public.tipo_electrodomestico(id_tipo_electro) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_elct FOREIGN KEY (id_marca) REFERENCES public.marca(id_marca) ON UPDATE CASCADE ON DELETE RESTRICT
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.atencion
(
    id_atencion serial NOT NULL,
    id_electro integer NOT NULL,
    id_horario integer NOT NULL,
    fecha_reserva_cita date,
    tipo character varying(30) NOT NULL,		-- En taller / A domicilio
	estado_atencion character varying(30) NOT NULL,
    falla_descrita text,
	monto_total numeric,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_atencion),
    CONSTRAINT fk_hor FOREIGN KEY (id_horario) REFERENCES public.horario_atencion(id_horario) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_elct FOREIGN KEY (id_electro) REFERENCES public.electrodomestico(id_electrodomestico) ON UPDATE CASCADE ON DELETE RESTRICT
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.categoria_pieza
(
    id_categoria serial NOT NULL,
    nombre_cat character varying(50) NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_categoria)
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.pieza
(
    id_pieza serial NOT NULL,
    nombre_pieza character varying(200) NOT NULL,
    stock bigint NOT NULL,
    precio_pieza numeric NOT NULL,
    id_categoria integer NOT NULL,
	estado_activ boolean NOT NULL DEFAULT true,
    PRIMARY KEY (id_pieza),
    CONSTRAINT fk_cat FOREIGN KEY (id_categoria) REFERENCES public.categoria_pieza(id_categoria)
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.detalle_atencion
(
 	id_atencion integer NOT NULL,
	id_servicio integer NOT NULL,
	monto_servicio numeric,
	observacion_tec text,
	PRIMARY KEY (id_atencion, id_servicio),
	CONSTRAINT fk_serv FOREIGN KEY (id_servicio) REFERENCES public.servicio(id_servicio) ON UPDATE CASCADE ON DELETE RESTRICT
);
---------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.detalle_actividades
(
	id_atencion integer NOT NULL,
	id_servicio integer NOT NULL,
	id_actividad integer,
	PRIMARY KEY (id_atencion, id_servicio, id_actividad),
	CONSTRAINT fk_deta FOREIGN KEY (id_atencion, id_servicio) REFERENCES public.detalle_atencion(id_atencion, id_servicio),
	CONSTRAINT fk_acv FOREIGN KEY (id_actividad) REFERENCES public.actividades_servicio(id_actividad) ON UPDATE CASCADE ON DELETE RESTRICT
);
----------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.detalle_piezas_usadas
(
	id_atencion integer NOT NULL,
	id_servicio integer NOT NULL,
	id_pieza integer,
	PRIMARY KEY (id_atencion, id_servicio, id_pieza),
	CONSTRAINT fk_detp FOREIGN KEY (id_atencion, id_servicio) REFERENCES public.detalle_atencion(id_atencion, id_servicio),
	CONSTRAINT fk_pza FOREIGN KEY (id_pieza) REFERENCES public.pieza(id_pieza) ON UPDATE CASCADE ON DELETE RESTRICT
);
----------------------------------------------------------
/*********************************************************
  SCRIPT : VISTAS: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
--	PERSONAS
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_clientes
WITH (
  security_barrier=true
) 
AS
select C.id_persona, U.id_user, 
Rtrim(replace(concat(C.nombre_1,' ',C.nombre_2,' ',C.apellido_1,' ',C.apellido_2),'  ',' ')) as nombres,
C.telefono, D.nombre_distrito, C.direccion, U.email, C.estado_activ
from public.persona C inner join public.usuario U on C.id_persona = U.id_persona
left join public.distrito D on C.id_distrito = D.id_distrito
where U.id_rol=1
order by U.id_user;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_encargados
WITH (
  security_barrier=true
) 
AS
select E.id_persona, U.id_user, 
Rtrim(replace(concat(E.nombre_1,' ',E.nombre_2,' ',E.apellido_1,' ',E.apellido_2),'  ',' ')) as nombres,
E.telefono, D.nombre_distrito, E.direccion, U.email, E.estado_activ
from public.persona E inner join public.usuario U on E.id_persona = U.id_persona
left join public.distrito D on E.id_distrito = D.id_distrito
where U.id_rol=2;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_tecnicos
WITH (
  security_barrier=true
) 
AS
select T.id_persona, U.id_user, 
Rtrim(replace(concat(T.nombre_1,' ',T.nombre_2,' ',T.apellido_1,' ',T.apellido_2),'  ',' ')) as nombres,
E.nombre_esp as especialidad,
T.telefono, D.nombre_distrito, T.direccion, U.email, T.foto, T.estado_activ
from public.persona T inner join public.usuario U on T.id_persona = U.id_persona
left join public.especialidad E on E.id_especialidad = T.id_especialidad
left join public.distrito D on T.id_distrito = D.id_distrito
where U.id_rol=3;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_electrodomesticos
WITH (
  security_barrier=true
) 
AS
select E.id_electrodomestico, E.nro_serie, TE.nom_tipo_electro as tipo,
E.modelo, M.nombre_marca as marca, 
E.id_propietario, C.nombres as propietario, E.estado_activ
from electrodomestico E inner join tipo_electrodomestico TE on TE.id_tipo_electro = E.id_tipo_electro 
inner join marca M on E.id_marca = M.id_marca
inner join v_clientes C on C.id_persona = E.id_propietario;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_piezas
WITH (
  security_barrier=true
) 
AS
select P.id_pieza, P.nombre_pieza, P.id_categoria, C.nombre_cat, P.precio_pieza, P.stock, P.estado_activ
from pieza P inner join categoria_pieza C on P.id_categoria = C.id_categoria;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_horarios
WITH (
  security_barrier=true
) 
AS
select H.* from persona T inner join horario_atencion H on H.id_tecnico = T.id_persona
left join usuario U on U.id_persona = T.id_persona where U.id_rol = 3 and H.fecha_atencion >= CURRENT_DATE;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_citas
WITH (
  security_barrier=true
) AS
 SELECT a.id_atencion,
    c.id_persona AS id_cliente,
    a.id_electro,
    t.id_persona AS id_tecnico,
    a.fecha_reserva_cita,
    h.fecha_atencion,
    h.hora_inicio,
    a.tipo,
    a.falla_descrita,
	a.estado_atencion
   FROM atencion a
     JOIN horario_atencion h ON a.id_horario = h.id_horario
     JOIN electrodomestico e ON e.id_electrodomestico = a.id_electro
     LEFT JOIN persona t ON t.id_persona = h.id_tecnico
     LEFT JOIN persona c ON c.id_persona = e.id_propietario
  WHERE a.estado_atencion::text = 'Pendiente'::text AND a.estado_activ;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_citas_domicilio
WITH (
  security_barrier=true
) 
AS
select A.id_atencion, 
C.nombres as nombre_cliente,
concat(C.nombre_distrito,', ',c.direccion) as direc_cliente,
E.tipo as tipo_electro,
T.id_persona as id_tecnico, T.nombres as nombre_tecnico,
H.fecha_atencion, H.hora_inicio, A.tipo as lugar
from atencion A inner join horario_atencion H on A.id_horario = H.id_horario 
inner join v_electrodomesticos E on E.id_electrodomestico = A.id_electro
left join v_tecnicos T on T.id_persona = H.id_tecnico
left join v_clientes C on C.id_persona = E.id_propietario  
where estado_atencion = 'Pendiente' and A.tipo = 'A domicilio'
and A.estado_activ;
----------------------------------------------------------
CREATE OR REPLACE VIEW public.v_resumen_atencion
WITH (
  security_barrier=true
) AS
 SELECT ci.id_atencion,
    cli.nombres,
    cli.telefono,
    cli.nombre_distrito,
    cli.direccion,
    ci.fecha_atencion,
    s.nombre_serv,
    e.nro_serie,
    e.tipo AS tipo_electro,
    e.modelo,
    e.marca,
    ci.hora_inicio,
    ci.tipo,
    ci.falla_descrita,
    ci.fecha_reserva_cita,
	ci.estado_atencion
   FROM v_clientes cli
     JOIN v_citas ci ON cli.id_persona = ci.id_cliente
     JOIN detalle_atencion d ON d.id_atencion = ci.id_atencion
     JOIN servicio s ON d.id_servicio = s.id_servicio
     JOIN v_electrodomesticos e ON e.id_electrodomestico = ci.id_electro;
----------------------------------------------------------
/*********************************************************
  SCRIPT : FUNCIONES: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_validar_acceso(user_rol integer, correo character varying, contrasena text)
RETURNS TABLE(id_persona integer, id_user char(10), rol character varying, nombre_completo character varying, correo character varying, foto character varying)
AS 
$$ 
select 
P.id_persona, U.id_user, R.nombre_rol,
Rtrim(replace(concat(P.nombre_1,' ',P.nombre_2,' ',P.apellido_1,' ',P.apellido_2),'  ',' ')) as nombres,
U.email, P.foto
from public.usuario U inner join public.persona P on P.id_persona = U.id_persona
inner join public.roles R on U.id_rol = R.id_rol
where U.id_rol = user_rol and U.email = correo and U.contra = contrasena and U.estado_activ;
$$
LANGUAGE SQL;
----------------------------------------------------------
--	CONSULTAS
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_cliente(id_cliente integer)
RETURNS TABLE(id_cliente integer, id_user char(10), nom1 character varying, nom2 character varying, ape1 character varying, ape2 character varying,
			  id_tdoc integer, nro_doc character varying, telefono character varying(9), id_distrito integer, direccion text,
			  email character varying, contra text, foto character varying, estado boolean)
AS 
$$ 
select
C.id_persona, U.id_user,
C.nombre_1,C.nombre_2,C.apellido_1,C.apellido_2,
C.id_tipo_doc, C.nro_doc,
C.telefono,
C.id_distrito, C.direccion,
U.email, U.contra, C.foto, C.estado_activ
from persona C inner join usuario U on C.id_persona = U.id_persona
where U.id_rol=1 and C.id_persona = id_cliente
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_encargado(id_encargado integer)
RETURNS TABLE(id_enc integer, id_user char(10), nom1 character varying, nom2 character varying, ape1 character varying, ape2 character varying,
			  id_tdoc integer, nro_doc character varying, telefono character varying, id_distrito integer, direccion text,
			  email character varying, contra text, foto character varying, estado boolean)
AS 
$$ 
select
E.id_persona, U.id_user,
E.nombre_1,E.nombre_2,E.apellido_1,E.apellido_2,
E.id_tipo_doc, E.nro_doc,
E.telefono,
E.id_distrito, E.direccion,
U.email, U.contra, E.foto, E.estado_activ
from persona E inner join usuario U on E.id_persona = U.id_persona
where U.id_rol=2 and E.id_persona = id_encargado
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_tecnico(id_tecnico integer)
RETURNS TABLE(id_tec integer, id_user char(10), nom1 character varying, nom2 character varying, ape1 character varying, ape2 character varying,
			  id_tdoc integer, nro_doc character varying, especialidad integer, a_exp integer,
			  telefono character varying, id_distrito integer, direccion text,
			  email character varying, contra text, foto character varying, estado boolean)
AS 
$$ 
select
T.id_persona, U.id_user,
T.nombre_1, T.nombre_2, T.apellido_1, T.apellido_2,
T.id_tipo_doc, T.nro_doc,
T.id_especialidad, T.anios_experiencia,
T.telefono, T.id_distrito, T.direccion,
U.email, U.contra, T.foto, T.estado_activ
from persona T inner join usuario U on T.id_persona = U.id_persona
where U.id_rol=3 and T.id_persona = id_tecnico
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_horario(id_hora integer)
RETURNS TABLE
(id_hora integer, 
 tecnico character varying, 
 especialidad character varying, 
 telefono character varying,
 foto character varying,
 fecha date, 
 hora time)
AS 
$$ 			  
select H.id_horario, 
T.nombres,T.especialidad,T.telefono,T.foto,
H.fecha_atencion, H.hora_inicio
from v_tecnicos T inner join horario_atencion H on H.id_tecnico = T.id_persona
where H.id_horario = id_hora;
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_consultar_pieza(id_pieza integer)
RETURNS TABLE
(	id integer,	nombre_pieza character varying, id_categoria integer, nom_categoria character varying,
 	precio numeric, stock bigint, estado boolean)
AS 
$$ 
select P.id_pieza, P.nombre_pieza, P.id_categoria, C.nombre_cat, P.precio_pieza, P.stock, P.estado_activ
from pieza P inner join categoria_pieza C on P.id_categoria = C.id_categoria
where id_pieza=$1nue
$$
LANGUAGE SQL;
----------------------------------------------------------
--	INSERCIONES
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_generar_id_usuario(rol integer)
RETURNS char(10)
AS 
$$
DECLARE
	prefix char(3);
	numero integer;
	cifras integer;
BEGIN
	IF rol = 1	THEN prefix = 'CLI';
	ELSEIF rol = 2	THEN prefix = 'ENC';
	ELSEIF rol = 3	THEN prefix = 'TEC';
	END IF;
	select max(cast(right(id_user, 6) as integer))+1 into numero from usuario where id_rol = rol;
	cifras = length(numero||'');
	return concat(prefix,'-',repeat('0',6-cifras),numero);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
--	REPORTES
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_reportes_x_tecnico(id_tec integer, fecha_1 date, fecha_2 date DEFAULT CURRENT_DATE)
RETURNS TABLE(id_atencion integer, fecha_atencion date, tecnico character varying(112), cliente character varying(112), 
			  electrodomestico character varying(50), marca character varying(50), servicio_realizado character varying(50))
AS 
$$
select A.id_atencion, H.fecha_atencion,
Rtrim(replace(concat(T.nombre_1,' ',T.nombre_2,' ',T.apellido_1,' ',T.apellido_2),'  ',' ')) as tecnico,
Rtrim(replace(concat(C.nombre_1,' ',C.nombre_2,' ',C.apellido_1,' ',C.apellido_2),'  ',' ')) as propietario,
TE.nom_tipo_electro, M.nombre_marca,
S.nombre_serv
from atencion A
inner join horario_atencion H on A.id_horario = H.id_horario 
inner join electrodomestico E on A.id_electro = E.id_electrodomestico
left join persona T on T.id_persona = H.id_tecnico
left join persona C on C.id_persona = E.id_propietario 
left join tipo_electrodomestico TE on TE.id_tipo_electro = E.id_tipo_electro
left join marca M on M.id_marca = E.id_marca
left join detalle_atencion D on A.id_atencion = D.id_atencion
left join servicio S on D.id_servicio = S.id_servicio

where estado_atencion = 'Finalizado' 
and H.id_tecnico = id_tec
and H.fecha_atencion between fecha_1 and fecha_2
and A.estado_activ
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_reportes_x_cliente(id_cli integer, fecha_1 date, fecha_2 date DEFAULT CURRENT_DATE, monto_1 numeric DEFAULT 0.00, monto_2 numeric DEFAULT 99999999.99)
RETURNS TABLE(id_atencion integer, fecha_atencion date, cliente character varying(112),  
			  electrodomestico character varying(50), marca character varying(50), 
			  servicio_realizado character varying(50), monto numeric,
			  tecnico character varying(112))
AS 
$$
select A.id_atencion, H.fecha_atencion,
Rtrim(replace(concat(C.nombre_1,' ',C.nombre_2,' ',C.apellido_1,' ',C.apellido_2),'  ',' ')) as cliente,
TE.nom_tipo_electro, M.nombre_marca,
S.nombre_serv,
D.monto_servicio,
Rtrim(replace(concat(T.nombre_1,' ',T.nombre_2,' ',T.apellido_1,' ',T.apellido_2),'  ',' ')) as tecnico
from atencion A
inner join horario_atencion H on A.id_horario = H.id_horario 
inner join electrodomestico E on A.id_electro = E.id_electrodomestico
left join persona T on T.id_persona = H.id_tecnico
left join persona C on C.id_persona = E.id_propietario 
left join tipo_electrodomestico TE on TE.id_tipo_electro = E.id_tipo_electro
left join marca M on M.id_marca = E.id_marca
left join detalle_atencion D on A.id_atencion = D.id_atencion
left join servicio S on D.id_servicio = S.id_servicio

where estado_atencion = 'Finalizado' 
and E.id_propietario = id_cli
and H.fecha_atencion between fecha_1 and fecha_2
and D.monto_servicio between monto_1 and monto_2
and A.estado_activ
$$
LANGUAGE SQL;
----------------------------------------------------------
/*********************************************************
  SCRIPT : PROCEDIMIENTOS: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_cliente
(	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
	nro_doc character varying default null,
	tel character varying default null,
	id_distrito integer default null, 
	direccion text default null,
	correo character varying default null,
	contrasena text default null,
	foto character varying default null) 
AS 
$$
DECLARE
	id_per_cli integer;
	id_user_cli char(10);
BEGIN
	INSERT INTO public.persona
	(	nombre_1, nombre_2, apellido_1, apellido_2, 
		id_tipo_doc, nro_doc, telefono, id_distrito, direccion, foto)
	VALUES
		($1, $2, $3, $4, $5, $6, $7, $8, $9, $12);
	SELECT max(id_persona) into id_per_cli from public.persona;
	SELECT f_generar_id_usuario(1) into id_user_cli;
	INSERT INTO public.usuario
		(id_user, id_rol, id_persona, email, contra)
	VALUES 
		(id_user_cli, 1, id_per_cli, $10, $11);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_encargado
(	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
	nro_doc character varying default null,
	tel character varying default null,
	id_distrito integer default null, 
	direccion text default null,
	correo character varying default null,
	contrasena text default null, 
 	fec_ingreso date default CURRENT_DATE,
 	foto character varying default null) 
AS 
$$
DECLARE
	id_per_enc integer;
	id_user_enc char(10);
BEGIN
	INSERT INTO public.persona
	(	nombre_1, nombre_2, apellido_1, apellido_2, 
		id_tipo_doc, nro_doc, telefono, id_distrito, direccion, fecha_ingreso, foto)
	VALUES
		($1, $2, $3, $4, $5, $6, $7, $8, $9, $12, $13);
	SELECT max(id_persona) into id_per_enc from public.persona;
	SELECT f_generar_id_usuario(2) into id_user_enc;
	INSERT INTO public.usuario
		(id_user, id_rol, id_persona, email, contra)
	VALUES 
		(id_user_enc, 2, id_per_enc, $10, $11);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_tecnico
(	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
	nro_doc character varying default null,
	tel character varying default null,
	id_distrito integer default null, 
	direccion text default null,
	correo character varying default null,
	contrasena text default null,
 	id_esp integer default null,
 	a_exp integer default null,
 	fec_ingreso date default CURRENT_DATE,
 	foto character varying default null)
AS 
$$
DECLARE
	id_per_tec integer;
	id_user_tec char(10);
BEGIN
	INSERT INTO public.persona
	(	nombre_1, nombre_2, apellido_1, apellido_2, 
		id_tipo_doc, nro_doc, telefono, id_distrito, direccion, id_especialidad, anios_experiencia, fecha_ingreso, foto)
	VALUES
		($1, $2, $3, $4, $5, $6, $7, $8, $9, $12, $13, $14, $15);
	SELECT max(id_persona) into id_per_tec from public.persona;
	SELECT f_generar_id_usuario(3) into id_user_tec;
	INSERT INTO public.usuario
		(id_user, id_rol, id_persona, email, contra)
	VALUES 
		(id_user_tec, 3, id_per_tec, $10, $11);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_electrodomestico
(	nro_serie character varying default null,
	id_tipo_electro integer default null,
	modelo character varying default null,
	id_marca integer default null,
 	id_propietario integer default null,
 	estado_activ boolean default true
)
AS
$$
INSERT INTO public.electrodomestico
	(nro_serie, id_tipo_electro, modelo, id_marca, id_propietario, estado_activ)
VALUES 
($1, $2, $3, $4, $5, $6);
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nueva_pieza
(	nombre character varying,
 	id_cat integer,
 	precio numeric, 
 	stock bigint)
AS 
$$
INSERT INTO public.pieza
(nombre_pieza, id_categoria, precio_pieza, stock)
VALUES
($1, $2, $3, $4);
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nueva_cita
( 	id_electro integer,
 	id_horario integer,
 	id_servicio integer,
 	lugar character varying,
 	falla text,
 	fecha_reserva date default CURRENT_DATE)
AS 
$$
DECLARE
	id_cita integer;
BEGIN
INSERT INTO public.atencion
(id_electro, id_horario, tipo, falla_descrita, fecha_reserva_cita, estado_atencion)
VALUES
($1, $2, $4, $5, $6, 'Pendiente');
SELECT max(id_atencion) into id_cita from public.atencion;
UPDATE public.horario_atencion
set estado = 'Reservado' where horario_atencion.id_horario = $2;
INSERT INTO public.detalle_atencion
(id_atencion, id_servicio)
VALUES (id_cita, id_servicio);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_agregar_venta(id_aten integer, monto numeric)
AS 
$$
DECLARE
	id_serv_venta integer;
BEGIN
select id_servicio into id_serv_venta from public.servicio where nombre_serv like 'Venta%';
INSERT INTO public.detalle_atencion(id_atencion, id_servicio, monto_servicio)
	VALUES (id_aten, id_serv_venta, monto);
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_uso_pieza(id_aten integer, id_serv integer, id_pza integer, cant smallint)
AS 
$$
INSERT INTO public.detalle_piezas_usadas(id_atencion, id_servicio, id_pieza)
	VALUES (id_aten, id_serv, id_pza);
UPDATE public.pieza set stock = stock-cant;
$$
LANGUAGE SQL;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_agregar_actividad(id_aten integer, id_serv integer, id_activi integer)
AS 
$$
INSERT INTO public.detalle_actividades(id_atencion, id_servicio, id_actividad)
	VALUES (id_aten, id_serv, id_activi);
$$
LANGUAGE SQL;
----------------------------------------------------------
--	ACTUALIZACIONES
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_cliente
(	id_cliente integer,
 	id_usuario character,
 	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
 	doc character varying default null,
 	tel character varying default null,
 	id_distr integer default null, 
	direcc text default null,
 	correo character varying default null,
 	contrasena text default null,
 	estado boolean default true,
 	new_foto character varying default null) 
AS 
$$
BEGIN
	UPDATE public.persona
	set nombre_1=nom_1, nombre_2=nom_2, apellido_1=ape_1, apellido_2=ape_2, 
	id_tipo_doc=id_tdoc, nro_doc=doc, telefono=tel, id_distrito=id_distr, direccion=direcc, foto=new_foto, estado_activ=estado
	where id_persona = id_cliente;

	UPDATE public.usuario
	set email=correo, contra=contrasena, estado_activ=estado
	where id_user = id_usuario;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_encargado
(	id_encargado integer,
 	id_usuario character,  	
 	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
 	doc character varying default null,
 	tel character varying default null,
 	id_distr integer default null, 
	direcc text default null,
 	correo character varying default null,
 	contrasena text default null,
 	fec_ingreso date default null,	
 	fec_baja date default null,	
 	estado boolean default true,
 	new_foto character varying default null)
AS 
$$
BEGIN
	UPDATE public.persona
	set nombre_1=nom_1, nombre_2=nom_2, apellido_1=ape_1, apellido_2=ape_2, 
	id_tipo_doc=id_tdoc, nro_doc=doc, telefono=tel, id_distrito=id_distr, direccion=direcc, 
	fecha_ingreso=fec_ingreso, fecha_baja=fec_baja,
	foto=new_foto, estado_activ=estado
	where id_persona = id_encargado;

	UPDATE public.usuario
	set email=correo, contra=contrasena, estado_activ=estado
	where id_user = id_usuario;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_tecnico
(	id_tecnico integer,
 	id_usuario character,  	
 	nom_1 character varying default null,
	nom_2 character varying default null,
	ape_1 character varying default null,
	ape_2 character varying default null,
	id_tdoc integer default null,
 	doc character varying default null,
 	tel character varying default null,
 	id_distr integer default null, 
	direcc text default null,
 	correo character varying default null,
 	contrasena text default null,
	id_esp integer default null,
 	a_exp integer default null,	 
 	fec_ingreso date default null,	
 	fec_baja date default null,	
 	estado boolean default true,
 	new_foto character varying default null)
AS 
$$
BEGIN
	UPDATE public.persona
	set nombre_1=nom_1, nombre_2=nom_2, apellido_1=ape_1, apellido_2=ape_2, 
	id_tipo_doc=id_tdoc, nro_doc=doc, telefono=tel, id_distrito=id_distr, direccion=direcc,
	id_especialidad=id_esp, anios_experiencia=a_exp, fecha_ingreso=fec_ingreso, fecha_baja=fec_baja,
	foto=new_foto, estado_activ=estado
	where id_persona = id_tecnico;

	UPDATE public.usuario
	set email=correo, contra=contrasena, estado_activ=estado
	where id_user = id_usuario;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_actualizar_pieza
(	id_pieza integer,
 	nombre character varying,
 	id_cat integer,
 	precio numeric, 
 	stock bigint,
 	estado boolean default true)
AS 
$$
UPDATE public.pieza
set nombre_pieza=$2, id_categoria=$3, precio_pieza=$4, stock=$5, estado_activ=$6
where id_pieza=$1;
$$
LANGUAGE SQL;

----------------------------------------------------------
--  BORRADO LÓGICO (estado=false)
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_cambiar_estado_persona(id_per integer, estado boolean)
AS 
$$
BEGIN
	UPDATE public.persona
	set estado_activ = estado
	where id_persona = id_per;

	UPDATE public.usuario
	set estado_activ = estado
	where id_persona = id_per;
END
$$
LANGUAGE plpgsql;
---------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_cambiar_estado_pieza(id integer, estado boolean)
AS 
$$
BEGIN
	UPDATE public.pieza
	set estado_activ = estado
	where id_pieza = id;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_cambiar_estado_electrodomestico(id integer, estado boolean)
AS 
$$
BEGIN
	UPDATE public.electrodomestico
	set estado_activ = estado
	where id_electrodomestico = id;
END
$$
LANGUAGE plpgsql;
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_desactivar_horarios_pasados()
AS 
$$
UPDATE horario_atencion 
set estado = 'Desactivado'
where (fecha_atencion + hora_inicio + interval '30 minutes') <= LOCALTIMESTAMP and estado = 'Disponible';
$$
LANGUAGE SQL;
----------------------------------------------------------
/*********************************************************
  SCRIPT : INSERCIÓN DE DATOS: taller_utp (POSTGRESQL)
*********************************************************/
----------------------------------------------------------
INSERT INTO public.servicio(nombre_serv, descripcion, estado_activ, foto_serv)
	VALUES
	('Instalaciones', 'Deja la instalación de tus artefactos en manos de los expertos.', true, 'img/servicios/instalacion.png'),
	('Reparaciones', 'Soluciona las averías de tus artefactos con repuestos originales.', true, 'img/servicios/reparacion.png'),
	('Conversiones', 'Realiza la conversión de tu cocina a gas natural.', true, 'img/servicios/conversiones.png'),
	('Mantenimiento', 'Prolonga la vida útil de tus artefactos con cuidados preventivos.', true, 'img/servicios/mantenimiento.png'),
	('Diagnóstico técnico', 'Si tu artefacto presenta averías, solicita evaluación técnica del equipo.', true, 'img/servicios/diagnostico.png'),
	('Asesoría técnica', 'Recibe asesoría sobre la configuración y uso de tus artefactos.', true, 'img/servicios/asesoria.png'),
	('Venta de accesorios', 'Encuentra los accesorios originales que necesitas para tus artefactos.', false, NULL),
	('Estudio de factibilidad', 'Verifica si el espacio donde se instalará el artefacto cuenta con las condiciones técnicas, eléctricas y de gasfitería necesarias, para el óptimo funcionamiento del producto.', true, 'img/servicios/factibilidad.png'),
	('Visitas técnicas', 'Solicita la visita técnica de nuestros expertos para realizar el diagnóstico o reparación del artefacto en tu hogar.', true, NULL);
---------------------------------------------------------
INSERT INTO actividades_servicio (id_servicio, nombre_actividad, precio)
VALUES
(2, 'Sub1', 10.50),
(2, 'Sub2', 23.00),
(2, 'Sub3', 29.00),
(2, 'Sub4', 46.00);
---------------------------------------------------------
INSERT INTO public.tipo_documento(nom_tipo_doc)
	VALUES
	('DNI'),
	('Carnet de Extranjería'),
	('Otros');
---------------------------------------------------------
INSERT INTO public.distrito(nombre_distrito)
	VALUES
	('Alto Selva Alegre'),
	('Arequipa'),
	('Cayma'),
	('Cerro Colorado'),
	('Characato'),
	('Chiguata'),
	('Jacobo Hunter'),
	('Jose Luis Bustamante y Ribero'),
	('La Joya'),
	('Mariano Melgar'),
	('Miraflores'),
	('Mollebaya'),
	('Paucarpata'),
	('Sabandia'),
	('Sachaca'),
	('Socabaya'),
	('Tiabaya'),
	('Uchumayo'),
	('Yanahuana'),
	('Yarabamba'),
	('Yura');
---------------------------------------------------------
INSERT INTO public.roles(nombre_rol)
	VALUES
	('Cliente'),
	('Encargado'),
	('Técnico');
---------------------------------------------------------
INSERT INTO public.especialidad(nombre_esp)
	VALUES
	('Especialista en termas eléctricas'),
	('Reparación de aire acondicionado');
---------------------------------------------------------
--ENCARGADO
INSERT INTO public.persona(nombre_1, nombre_2, apellido_1, apellido_2, id_tipo_doc, nro_doc, telefono, id_distrito, direccion, fecha_ingreso, fecha_baja, foto)
	VALUES
	('Alexandre', 'Vidal', 'Rodriguez', 'Coronado', 1, '65486516', '950036349', 4, 'Calle San Sebastián, 79', '2012-10-01', '2020-12-31', 'img/personas/m1.jpg'),
	('John', NULL, 'Doe', NULL, 2, '007629205', '941069548', 3, 'Av. Parra, 65', '2021-01-01', NULL, 'img/personas/m2.jpg');

INSERT INTO public.usuario(id_user, id_rol, id_persona, email, contra, estado_activ)
	VALUES
	('ENC-000001', 2, 1, 'admin01.utp@gmail.com', 'encargado123', false),
	('ENC-000002', 2, 2, 'admin02.utp@gmail.com', 'encargado123', true);

--TÉCNICOS
INSERT INTO public.persona(nombre_1, nombre_2, apellido_1, apellido_2, id_tipo_doc, nro_doc, telefono, id_distrito, direccion, id_especialidad, anios_experiencia, fecha_ingreso, foto)
	VALUES
	('Guillermo', NULL, 'Smith', 'Coppola', 1, '61614803', '997555176', 4, 'Av. Los Ángeles, 542', 1, 5, '2012-12-13', 'img/personas/m3.jpg'),
	('Eduardo', NULL, 'Vallejo', 'Pereira', 1, '28423490', '974673951', 4, 'Av. Las Vegas, 123', 1, 2, '2013-12-16', 'img/personas/m4.jpg'),
	('Adriana', NULL, 'Jordan', 'Rodriguez', 1, '40476142', '963306299', 4,  'Av. Las Malvinas, 213', 2, 1, '2014-8-12', 'img/personas/f1.jpg'),
	('Andrea', NULL, 'Valdivia', 'Segales', 1, '48804278', '985130731', 4, 'Calle Amauta, 138', 1, 4, '2015-10-02', 'img/personas/f2.jpg'),
	('Mario', NULL, 'Diaz', 'Torres', 1, '39840290', '938781368', 5, 'Av. Los Acres, 64', 1, 1, '2016-05-10', 'img/personas/m5.jpg'),
	('Melman', NULL, 'Schwimmer', NULL, 2, '001925687', '974594323', 4, 'Urb. Los cipreses, A9', 1, 2, '2017-02-23', 'img/personas/m6.jpg'),
	('Jennifer', NULL, 'Anco', 'Mamani', 1, '65246344', '938995970', 5, 'Av. Independecia, 71', 2, 4, '2018-11-09', 'img/personas/f3.jpg'),
	('Alex', NULL, 'Cruz', 'Leon', 1, '44402460', '968696753', 4, 'Urb. Los cipreses, B1', 1, 3, '2019-05-10', 'img/personas/m7.jpg'),
	('Jose', NULL, 'Perez', 'Rodriguez', 1, '50502291', '963725720', 5, 'Av. Argentina, 256', 2, 10, '2020-10-23', 'img/personas/m8.jpg'),
	('Juan', 'Jose', 'Molina', 'Quispe', 1, '62289072', '994832406', 4, 'Calle Tahuaycani, 312', 1, 8, '2021-03-01', 'img/personas/m9.jpg');
	
INSERT INTO public.usuario(id_user, id_rol, id_persona, email, contra)
	VALUES
	('TEC-000001', 3, 3, 'smithgil@gmail.com', 'tecnico123'),
	('TEC-000002', 3, 4, 'perava@gmai.com', 'tecnico123'),
	('TEC-000003', 3, 5, 'adr.jordan@gmail.com', 'tecnico123'),
	('TEC-000004', 3, 6, 'andrea.valdivia@gmail.com', 'tecnico123'),
	('TEC-000005', 3, 7, 'mario.diaz@gmail.com', 'tecnico123'),
	('TEC-000006', 3, 8, 'melman.schwimmer@gmail.com', 'tecnico123'),
	('TEC-000007', 3, 9, 'jennifer.anco@gmail.com', 'tecnico123'),
	('TEC-000008', 3, 10, 'alex.cruz@gmail.com', 'tecnico123'),
	('TEC-000009', 3, 11, 'jose.perez@gmail.com', 'tecnico123'),
	('TEC-000010', 3, 12, 'juan.molina@gmail.com', 'tecnico123');

--CLIENTES
INSERT INTO public.persona(nombre_1, nombre_2, apellido_1, apellido_2, id_tipo_doc, nro_doc, telefono, id_distrito, direccion, foto)
	VALUES
	('Luis', NULL, 'Gamarra', 'Alcantara', 1, '68968558', '942256809', 4, 'Av. Parra, 313', 'img/personas/m9.jpg'),
	('Paul', NULL, 'Gutierrez', 'Manrique', 1, '79734822', '962122495', 4,'Av. Perú, 232', 'img/personas/m8.jpg'),
	('Juan', 'Pablo', 'Martinez', 'Lopez', 1, '51476446','943182888', 4,'Av. Argentina, 221', 'img/personas/m7.jpg'),
	('Leticia', NULL, 'Perez', 'Carpdevila', 1, '41005783','973308244', 4, 'Urb. Casa Blanca, B8', 'img/personas/f5.jpg'),
	('Edmundo', NULL, 'Quintana', 'Morante', 1, '29648571', '935067763', 4, 'Av. Paisajista, 407', 'img/personas/m6.jpg'),
	('Nicolas', NULL, 'Morales', 'Guillen', 1, '25918192', '998050058', 4, 'Urb. Zafiro, B11', 'img/personas/m5.jpg'),
	('Adrian', NULL, 'Ruiz', 'Villanueva', 1, '48722307','991349745', 4, 'Av. Porongoche, 606', 'img/personas/m4.jpg'),
	('William', NULL, 'Hammond', NULL, 2, '10459734080','953574916', 4, 'Calle César Vallejo, 89', 'img/personas/m3.jpg'),
	('Tookha', NULL, 'Garcia', 'Ghoul', 1, '56703261','984503612', 4, 'Jr. 28 de julo, 503', 'img/personas/f4.jpg'),
	('Gloria', NULL, 'Smith', NULL, 2, '00129073500', '935122495', 4, 'Av. Manuela Casárez, A7', 'img/personas/f3.jpg'); 

INSERT INTO public.usuario(id_user, id_rol, id_persona, email, contra)
	 VALUES
	 ('CLI-000001', 1, 1, 'alexandre.rodriguez@gmail.com', 'cliente123'),
	 ('CLI-000002', 1, 13, 'alcangama@gmail.com', 'cliente123'),
	 ('CLI-000003', 1, 14, 'gutman@gmail.com', 'cliente123'),
	 ('CLI-000004', 1, 15, 'martilop@gmail.com', 'cliente123'),
	 ('CLI-000005', 1, 16, 'leticia.perez@gmail.com', 'cliente123'),
	 ('CLI-000006', 1, 17, 'ed.quintana@gmail.com', 'cliente123'),
	 ('CLI-000007', 1, 18, 'nicola.morales@gmail.com', 'cliente123'),
	 ('CLI-000008', 1, 19, 'adrian.ruiz@gmail.com', 'cliente123'),
	 ('CLI-000009', 1, 20, 'william.hammond@gmail.com', 'cliente123'),
	 ('CLI-000010', 1, 21, 'tookha.garcia@gmail.com', 'cliente123'),
	 ('CLI-000011', 1, 22, 'gloria.smith@gmail.com', 'cliente123');
---------------------------------------------------------
DO $$
begin
   for cnt in 3..12 loop
    IF cnt%2 = 0 THEN
INSERT INTO public.horario_atencion(id_tecnico, fecha_atencion, hora_inicio, estado)
	VALUES
	(cnt, CURRENT_DATE, '07:00', 'Disponible'),
	(cnt, CURRENT_DATE, '10:00', 'Reservado'),
	(cnt, CURRENT_DATE, '13:00', 'Disponible'),
	(cnt, CURRENT_DATE, '16:00', 'Disponible'),
	(cnt, CURRENT_DATE, '19:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '07:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '10:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '13:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '16:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '07:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '10:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '13:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '16:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '19:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '3 day', '07:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '3 day', '10:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '4 day', '07:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '4 day', '07:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '5 day', '10:00', 'Disponible');
	else
	INSERT INTO public.horario_atencion(id_tecnico, fecha_atencion, hora_inicio, estado)
	VALUES
	(cnt, CURRENT_DATE, '08:00', 'Disponible'),
	(cnt, CURRENT_DATE, '11:00', 'Reservado'),
	(cnt, CURRENT_DATE, '14:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '08:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '11:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '14:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '1 day', '17:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '08:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '11:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '14:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '2 day', '17:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '3 day', '08:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '3 day', '11:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '3 day', '14:00', 'Disponible'),
	(cnt, CURRENT_DATE + INTERVAL '4 day', '08:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '4 day', '11:00', 'Reservado'),
	(cnt, CURRENT_DATE + INTERVAL '5 day', '08:00', 'Disponible');
	END IF;
   end loop;
END $$;
---------------------------------------------------------
INSERT INTO public.tipo_electrodomestico(nom_tipo_electro)
	VALUES
	('Licuadora'),
	('Extractor/Emprimidor'),
	('Batidora'),
	('Horno eléctrico'),
	('Olla arrocera'),
	('Dispensador de agua'),
	('Balanza de repostería'),
	('Refrigeradora'),
	('Frigobar'),
	('Cocina a gas'),
	('Cocina eléctrica'),
	('Horno microondas'),
	('Lavaplatos'),
	('Lavadora'),
	('Secadora'),
	('Aspiradora'),
	('Aire acondicionado'),
	('Ventilador'),
	('Plancha a vapor'),
	('Máquina de coser');
---------------------------------------------------------
INSERT INTO public.marca(nombre_marca)
	VALUES
	('Indurama'),
	('Coldex'),
	('General Electric'),
	('Mabe'),
	('Bosch'),
	('Samsung'),
	('Daewoo'),
	('LG'),
	('Westinghouse'),
	('Frigidaire'),
	('Sole'),
	('Brasec'),
	('Bryant'),
	('Alfano'),
	('Junkers'),
	('Rheem'),
	('Whirlpool'),
	('Electrolux'),
	('Kenmore'),
	('Klimatic'),
	('KitchenAid'),
	('Midea'),
	('Carrier'),
	('Lennox'),
	('York'),
	('Sanyo'),
	('Electra'),
	('Coldpoint'),
	('Hitachi'),
	('Surrey'),
	('Miray'),
	('Otro');
---------------------------------------------------------
INSERT INTO public.electrodomestico(nro_serie, id_tipo_electro, modelo, id_marca, id_propietario)
	VALUES
	('3913511', 14, 'WA17T6260BW', 6, 20),
	('3958671', 10, 'Monet', 1, 21);
---------------------------------------------------------
INSERT INTO public.atencion(id_electro, id_horario, fecha_reserva_cita, tipo, estado_atencion)
	VALUES
	(1, 1, '2022-05-12', 'A domicilio', 'Pendiente'),
	(1, 2, '2022-05-13', 'A domicilio', 'Pendiente');
---------------------------------------------------------
INSERT INTO public.categoria_pieza(nombre_cat)
	VALUES
	('Lavadoras'),
	('Licuadoras'),
	('Refrigeradores'),
	('Cocinas'),
	('Aire acondicionado'),
	('Aspiradoras'),
	('Lavaplatos'),
	('Microondas');
---------------------------------------------------------
INSERT INTO public.pieza(nombre_pieza, stock, precio_pieza, id_categoria)
	VALUES 
	('Manguera de entrada de lavadora de goma negra, 3/4 pulgadas x 5 pies', 300, 27.00, 1),
	('Tapa De Vaso Para Licuadora Oster Flexible Nacional', 500, 10.00, 2),
	('Timer Para Refrigerador Sankyo 220v 8 Horas Ge Mabe Wr9x553', 1000, 27.50, 3),
	('Valvula De Carga De Servicio Para Refrigeración 10 cm importado 887702', 220, 5.00, 3),
	('Bomba electromagnética de desagüe de lavadora Askoll 35W 220V 60HZ', 144, 169.90, 1),
	('Cuchilla para Sistema de Nutrición Oster Xpert Series BLSTXPN7002/7003', 2000, 108.00, 2),
	('Chisperos Para Cocina', 750, 77.00, 4),
	('Filtro De Carbón Campana Indurama', 80, 70.00, 4),
	('Juego de Limpieza Profeisional NT DN 40', 1000, 280.50, 6),
	('Kit Instalacion Lavaplatos', 500, 58.90, 7),
	('Condensador para horno microondas Sharp', 120, 146.00, 8),
	('Botón plateado para horno microondas Bosch', 280, 24.00, 8);
---------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.f_tecnicos_con_horario(
	mes integer,
	anyo integer)
    RETURNS TABLE(id_persona integer, nombres character varying) 
    LANGUAGE 'sql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
 			  
select distinct VT.id_persona, VT.nombres from 
v_tecnicos VT right join horario_atencion H 
on VT.id_persona = H.id_tecnico 
where EXTRACT(MONTH FROM H.fecha_atencion) = mes and EXTRACT(YEAR FROM h.fecha_atencion) = anyo
$BODY$;
---------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE public.sp_nuevo_horario(
	IN id_tecnico integer,
	IN fecha date,
	IN hora time without time zone)
LANGUAGE 'sql'
AS $BODY$
INSERT INTO public.horario_atencion
(id_tecnico, fecha_atencion, hora_inicio, estado)
VALUES
($1, $2, $3, 'Disponible');
$BODY$;